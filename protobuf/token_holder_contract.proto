syntax = "proto3";

package TokenHolder;

import "aelf/core.proto";
import "aelf/options.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

option csharp_namespace = "AElf.Contracts.TokenHolder";

service TokenHolderContract {
    
    option (aelf.csharp_state) = "AElf.Contracts.TokenHolder.TokenHolderContractState";
    
    // Actions
    rpc CreateScheme (CreateTokenHolderProfitSchemeInput) returns (google.protobuf.Empty) {
    }
    rpc AddBeneficiary (AddTokenHolderBeneficiaryInput) returns (google.protobuf.Empty) {
    }
    rpc RemoveBeneficiary (RemoveTokenHolderBeneficiaryInput) returns (google.protobuf.Empty) {
    }
    rpc ContributeProfits (ContributeProfitsInput) returns (google.protobuf.Empty) {
    }
    rpc DistributeProfits (DistributeProfitsInput) returns (google.protobuf.Empty) {
    }
    rpc RegisterForProfits (RegisterForProfitsInput) returns (google.protobuf.Empty) {
    }
    rpc Withdraw (aelf.Address) returns (google.protobuf.Empty) {
    }
    rpc ClaimProfits (ClaimProfitsInput) returns (google.protobuf.Empty) {
    }
    // Views
    rpc GetScheme (aelf.Address) returns (TokenHolderProfitScheme) {
        option (aelf.is_view) = true;
    }
    rpc GetProfitsMap (ClaimProfitsInput) returns (ReceivedProfitsMap) {
        option (aelf.is_view) = true;
    }
}

message CreateTokenHolderProfitSchemeInput {
    string symbol = 1;
    int64 minimum_lock_minutes = 2;
    map<string, int64> auto_distribute_threshold = 3;
}

message AddTokenHolderBeneficiaryInput {
    aelf.Address beneficiary = 1;
    int64 shares = 2;
}

message RemoveTokenHolderBeneficiaryInput {
    aelf.Address beneficiary = 1;
    int64 amount = 2;
}

message ContributeProfitsInput {
    aelf.Address scheme_manager = 1;
    int64 amount = 2;
    string symbol = 3;
}

message DistributeProfitsInput {
    aelf.Address scheme_manager = 1;
    map<string, int64> amounts_map = 2;
}

message RegisterForProfitsInput {
    aelf.Address scheme_manager = 1;
    int64 amount = 2;
}

message ClaimProfitsInput {
    aelf.Address scheme_manager = 1;
    aelf.Address beneficiary = 2;
}

message TokenHolderProfitScheme {
    string symbol = 1;
    aelf.Hash scheme_id = 2;
    int64 period = 3;
    int64 minimum_lock_minutes = 4;
    map<string, int64> auto_distribute_threshold = 5;
}

message ReceivedProfitsMap {
    map<string, int64> value = 1;
}