syntax = "proto3";

package AEDPoS;

import "aelf/options.proto";
import "aelf/core.proto";
import "authority_info.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option csharp_namespace = "AElf.Contracts.Consensus.AEDPoS";

service AEDPoSContract {
    
    option (aelf.csharp_state) = "AElf.Contracts.Consensus.AEDPoS.AEDPoSContractState";
    
    // Actions
    // -> Process
    rpc InitialAElfConsensusContract (InitialAElfConsensusContractInput) returns (google.protobuf.Empty) {
    }
    rpc FirstRound (Round) returns (google.protobuf.Empty) {
    }
    rpc UpdateValue (UpdateValueInput) returns (google.protobuf.Empty) {
    }
    rpc NextRound (Round) returns (google.protobuf.Empty) {
    }
    rpc NextTerm (Round) returns (google.protobuf.Empty) {
    }
    rpc UpdateTinyBlockInformation (TinyBlockInput) returns (google.protobuf.Empty) {
    }
    
    rpc SetMaximumMinersCount (google.protobuf.Int32Value) returns (google.protobuf.Empty) {
    }
    rpc ChangeMaximumMinersCountController (AuthorityInfo) returns (google.protobuf.Empty) {
    }

    // Views
    rpc GetCurrentMinerList (google.protobuf.Empty) returns (MinerList) {
        option (aelf.is_view) = true;
    }
    rpc GetCurrentMinerPubkeyList (google.protobuf.Empty) returns (PubkeyList) {
        option (aelf.is_view) = true;
    }
    rpc GetCurrentMinerListWithRoundNumber (google.protobuf.Empty) returns (MinerListWithRoundNumber) {
        option (aelf.is_view) = true;
    }
    rpc GetRoundInformation (google.protobuf.Int64Value) returns (Round) {
        option (aelf.is_view) = true;
    }
    rpc GetCurrentRoundNumber (google.protobuf.Empty) returns (google.protobuf.Int64Value) {
        option (aelf.is_view) = true;
    }
    rpc GetCurrentRoundInformation (google.protobuf.Empty) returns (Round) {
        option (aelf.is_view) = true;
    }
    rpc GetPreviousRoundInformation (google.protobuf.Empty) returns (Round) {
        option (aelf.is_view) = true;
    }
    rpc GetCurrentTermNumber (google.protobuf.Empty) returns (google.protobuf.Int64Value) {
        option (aelf.is_view) = true;
    }
    rpc GetCurrentTermMiningReward (google.protobuf.Empty) returns (google.protobuf.Int64Value) {
        option (aelf.is_view) = true;
    }
    rpc GetMinerList (GetMinerListInput) returns (MinerList) {
        option (aelf.is_view) = true;
    }
    rpc GetPreviousMinerList (google.protobuf.Empty) returns (MinerList) {
        option (aelf.is_view) = true;
    }
    rpc GetMinedBlocksOfPreviousTerm (google.protobuf.Empty) returns (google.protobuf.Int64Value) {
        option (aelf.is_view) = true;
    }
    rpc GetNextMinerPubkey (google.protobuf.Empty) returns (google.protobuf.StringValue) {
        option (aelf.is_view) = true;
    }
    rpc GetCurrentMinerPubkey (google.protobuf.Empty) returns (google.protobuf.StringValue) {
        option (aelf.is_view) = true;
    }
    rpc IsCurrentMiner (aelf.Address) returns (google.protobuf.BoolValue) {
        option (aelf.is_view) = true;
    }
    rpc GetNextElectCountDown (google.protobuf.Empty) returns (google.protobuf.Int64Value) {
        option (aelf.is_view) = true;
    }
    rpc GetPreviousTermInformation (google.protobuf.Int64Value) returns (Round) {
        option (aelf.is_view) = true;
    }
    rpc GetRandomHash (google.protobuf.Int64Value) returns (aelf.Hash) {
        option (aelf.is_view) = true;
    }
    rpc GetMaximumBlocksCount (google.protobuf.Empty) returns (google.protobuf.Int32Value) {
        option (aelf.is_view) = true;
    }
    rpc GetMaximumMinersCount (google.protobuf.Empty) returns (google.protobuf.Int32Value) {
        option (aelf.is_view) = true;
    }
    rpc GetMaximumMinersCountController (google.protobuf.Empty) returns (AuthorityInfo) {
        option (aelf.is_view) = true;
    }
    rpc GetMainChainCurrentMinerList (google.protobuf.Empty) returns (MinerList) {
        option (aelf.is_view) = true;
    }
    rpc GetPreviousTermMinerPubkeyList (google.protobuf.Empty) returns (PubkeyList) {
        option (aelf.is_view) = true;
    }
    rpc GetCurrentMiningRewardPerBlock (google.protobuf.Empty) returns (google.protobuf.Int64Value) {
        option (aelf.is_view) = true;
    }
}

message InitialAElfConsensusContractInput {
    bool is_term_stay_one = 1;
    bool is_side_chain = 2;
    int64 period_seconds = 3;
    int64 miner_increase_interval = 4;
}

// Just used as parameter of consensus contract method.
message UpdateValueInput {
    aelf.Hash out_value = 1; // Calculated from current in value.
    aelf.Hash signature = 2; // Calculated from current in value and signatures of previous round.
    int64 round_id = 3; // To ensure the values to update will be apply to correct round by comparing round id.
    aelf.Hash previous_in_value = 4; // Publish previous in value for validation previous signature and previous out value.
    google.protobuf.Timestamp actual_mining_time = 5;
    int32 supposed_order_of_next_round = 6;
    map<string, int32> tune_order_information = 7;
    map<string, bytes> encrypted_pieces = 8; // For others to recover his in value of current round.
    map<string, bytes> decrypted_pieces = 9;
    int64 produced_blocks = 10;
    map<string, aelf.Hash> miners_previous_in_values = 11;
    int64 implied_irreversible_block_height = 12;
}

// The miners public key list for each term.
message MinerList {
    repeated bytes pubkeys = 1;
}

message PubkeyList {
    repeated string pubkeys = 1;
}

// To query first round number of each term.
message TermNumberLookUp {
    map<int64, int64> map = 1;// Term number -> Round number.
}

// All the candidates.
message Candidates {
    repeated bytes pubkeys = 1;
}

// The information of a round.
message Round {
    int64 round_number = 1;
    map<string, MinerInRound> real_time_miners_information = 2;
    int64 main_chain_miners_round_number = 3;
    int64 blockchain_age = 4;
    string extra_block_producer_of_previous_round = 5;
    int64 term_number = 6;
    int64 confirmed_irreversible_block_height = 7;
    int64 confirmed_irreversible_block_round_number = 8;
    bool is_miner_list_just_changed = 9;
    int64 round_id_for_validation = 10;
}

// The information of a miner in a specific round.
message MinerInRound {
    int32 order = 1;
    bool is_extra_block_producer = 2;
    aelf.Hash in_value = 3;
    aelf.Hash out_value = 4;
    aelf.Hash signature = 5;
    google.protobuf.Timestamp expected_mining_time = 6;
    int64 produced_blocks = 7;
    int64 missed_time_slots = 8;
    string pubkey = 9;
    aelf.Hash previous_in_value = 10;
    int32 supposed_order_of_next_round = 11;
    int32 final_order_of_next_round = 12;
    repeated google.protobuf.Timestamp actual_mining_times = 13;// Miners must fill actual mining time when they do the mining.
    map<string, bytes> encrypted_pieces = 14;
    map<string, bytes> decrypted_pieces = 15;
    int64 produced_tiny_blocks = 16;
    int64 implied_irreversible_block_height = 17;
}

message AElfConsensusHeaderInformation {
    bytes sender_pubkey = 1;
    Round round = 2;
    AElfConsensusBehaviour behaviour = 3;
}

message AElfConsensusHint {
    AElfConsensusBehaviour behaviour = 1;
    int64 round_id = 2;
    int64 previous_round_id = 3;
}

enum AElfConsensusBehaviour {
    UPDATE_VALUE = 0;
    NEXT_ROUND = 1;
    NEXT_TERM = 2;
    NOTHING = 3;
    TINY_BLOCK = 4;
}

message AElfConsensusTriggerInformation {
    bytes pubkey = 1;// A must-have.
    aelf.Hash in_value = 2;
    aelf.Hash previous_in_value = 3;// Random hash of previous round for validation.
    AElfConsensusBehaviour behaviour = 4;
    map<string, bytes> encrypted_pieces = 5;
    map<string, bytes> decrypted_pieces = 6;
    map<string, aelf.Hash> revealed_in_values = 7;
}

message TermInfo {
    int64 term_number = 1;
    int64 round_number = 2;
}

message MinerListWithRoundNumber {
    MinerList miner_list = 1;
    int64 round_number = 2;
}

message TinyBlockInput {
    int64 round_id = 1;
    google.protobuf.Timestamp actual_mining_time = 2;
    int64 produced_blocks = 3;
}

message VoteMinersCountInput {
    int32 miners_count = 1;
    int64 amount = 2;
}

message ConsensusInformation {
    bytes value = 1;
}

message GetMinerListInput {
    int64 term_number = 1;
}

message RandomNumberRequestInformation {
    int64 target_round_number = 1;// The random hash is likely generated during this round.
    int64 order = 2;
    int64 expected_block_height = 3;
}

message HashList {
    repeated aelf.Hash values = 1;
}

message LatestPubkeyToTinyBlocksCount {
    string pubkey = 1;
    int64 blocks_count = 2;
}

// Events
message IrreversibleBlockFound {
    option (aelf.is_event) = true;
    int64 irreversible_block_height = 1 [(aelf.is_indexed) = true];
}

message IrreversibleBlockHeightUnacceptable {
    option (aelf.is_event) = true;
    int64 distance_to_irreversible_block_height = 1;
}

message MiningInformationUpdated {
    option (aelf.is_event) = true;
    string pubkey = 1 [(aelf.is_indexed) = true];
    google.protobuf.Timestamp mining_time = 2 [(aelf.is_indexed) = true];
    string behaviour = 3 [(aelf.is_indexed) = true];
    int64 block_height = 4 [(aelf.is_indexed) = true];
    aelf.Hash previous_block_hash = 5 [(aelf.is_indexed) = true];
}

message SecretSharingInformation {
    option (aelf.is_event) = true;
    Round previous_round = 1 [(aelf.is_indexed) = true];
    int64 current_round_id = 2;
    int64 previous_round_id = 3;
}

message MiningRewardGenerated {
    option (aelf.is_event) = true;
    int64 term_number = 1 [(aelf.is_indexed) = true];
    int64 amount = 2;
}

message MinerReplaced {
    option (aelf.is_event) = true;
    string new_miner_pubkey = 1;
}