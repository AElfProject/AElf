syntax = "proto3";

package treasury;

import "aelf/core.proto";
import "acs1.proto";

option csharp_namespace = "AElf.Contracts.Treasury";

service TreasuryContract {
    option (aelf.csharp_state) = "AElf.Contracts.Treasury.TreasuryContractState";
    option (aelf.base) = "acs1.proto";

    // Action
    rpc InitialTreasuryContract (google.protobuf.Empty) returns (google.protobuf.Empty) {
    }
    rpc InitialMiningRewardProfitItem (google.protobuf.Empty) returns (google.protobuf.Empty) {
    }
    rpc Donate (DonateInput) returns (google.protobuf.Empty) {
    }
    rpc Release (ReleaseInput) returns (google.protobuf.Empty) {
    }
    rpc DonateAll (DonateAllInput) returns (google.protobuf.Empty) {
    }
    rpc ChangeTreasuryController (acs1.AuthorityInfo) returns (google.protobuf.Empty) {
    }
    rpc SetDistributingSymbolList (SymbolList) returns (google.protobuf.Empty) {
    }
    rpc SetDividendPoolWeightSetting (DividendPoolWeightSetting) returns (google.protobuf.Empty){
    }
    rpc SetMinerRewardWeightSetting (MinerRewardWeightSetting) returns (google.protobuf.Empty){
    }
    // View
    rpc GetCurrentTreasuryBalance (google.protobuf.Empty) returns (google.protobuf.Int64Value) {
        option (aelf.is_view) = true;
    }
    rpc GetWelfareRewardAmountSample (GetWelfareRewardAmountSampleInput) returns (GetWelfareRewardAmountSampleOutput) {
        option (aelf.is_view) = true;
    }
    rpc GetTreasurySchemeId (google.protobuf.Empty) returns (aelf.Hash) {
        option (aelf.is_view) = true;
    }
    rpc GetTreasuryController (google.protobuf.Empty) returns (acs1.AuthorityInfo) {
        option (aelf.is_view) = true;
    }
    rpc GetDistributingSymbolList (google.protobuf.Empty) returns (SymbolList) {
        option (aelf.is_view) = true;
    }
    rpc GetDividendPoolWeightProportion (google.protobuf.Empty) returns (DividendPoolWeightProportion){
        option (aelf.is_view) = true;
    }
    rpc GetMinerRewardWeightProportion (google.protobuf.Empty) returns (MinerRewardWeightProportion){
        option (aelf.is_view) = true;
    }
}

message DonateInput {
    string symbol = 1;
    int64 amount = 2;
}

message ReleaseInput {
    int64 term_number = 1;
}

message RegisterInput {
    string token_symbol = 1;
    string token_name = 2;
    int64 total_supply = 3;
    int32 decimals = 4;
    string connector_weight = 5;
}

message GetWelfareRewardAmountSampleInput {
    repeated int64 value = 1;
}

message GetWelfareRewardAmountSampleOutput {
    repeated int64 value = 1;
}

message DonateAllInput {
    string symbol = 1;
}

message ReleaseMiningRewardInput {
    int64 mined_blocks_count = 1;
}

message MinerReElectionInformation {
    map<string, int64> continual_appointment_times = 1;
}

message SymbolList {
    repeated string value = 1;
}

message DividendPoolWeightSetting {
    int32 citizen_welfare_weight = 1;
    int32 backup_subsidy_weight = 2;
    int32 miner_reward_weight = 3;
}

message MinerRewardWeightSetting {
    int32 basic_miner_reward_weight = 1;
    int32 votes_weight_reward_weight = 2;
    int32 re_election_reward_weight = 3;
}

message SchemeProportionInfo{
    aelf.Hash scheme_id = 1;
    int32 proportion = 2;
}

message DividendPoolWeightProportion {
    SchemeProportionInfo citizen_welfare_proportion_info = 1;
    SchemeProportionInfo backup_subsidy_proportion_info = 2;
    SchemeProportionInfo miner_reward_proportion_info = 3;
}

message MinerRewardWeightProportion {
    SchemeProportionInfo basic_miner_reward_proportion_info = 1;
    SchemeProportionInfo votes_weight_reward_proportion_info = 2;
    SchemeProportionInfo re_election_reward_proportion_info = 3;
}
// Events

message DonationReceived {
    option (aelf.is_event) = true;
    aelf.Address from = 1 [(aelf.is_indexed) = true];
    aelf.Address to = 2 [(aelf.is_indexed) = true];
    string symbol = 3 [(aelf.is_indexed) = true];
    int64 amount = 4 [(aelf.is_indexed) = true];
    string memo = 5;
}
