/**
 * NFT contract.
 */
syntax = "proto3";

package nft;

import "aelf/core.proto";
import "aelf/options.proto";
import "acs1.proto";
import "transaction_fee.proto";
import "authority_info.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

option csharp_namespace = "AElf.Contracts.NFT";

service NFTContract {
    option (aelf.csharp_state) = "AElf.Contracts.NFT.NFTContractState";
    option (aelf.base) = "acs1.proto";

    // Create a new nft protocol.
    rpc Create (CreateInput) returns (google.protobuf.StringValue) {
    }
    rpc CrossChainCreate (CrossChainCreateInput) returns (google.protobuf.Empty) {
    }
    // Mint (Issue) an amount of nft.
    rpc Mint (MintInput) returns (aelf.Hash) {
    }
    // Transfer nft to another address.
    rpc Transfer (TransferInput) returns (google.protobuf.Empty) {
    }
    // Transfer nft from one address to another.
    rpc TransferFrom (TransferFromInput) returns (google.protobuf.Empty) {
    }
    // Approve another address to transfer nft from own account.
    rpc Approve (ApproveInput) returns (google.protobuf.Empty) {
    }
    // De-approve.
    rpc UnApprove (UnApproveInput) returns (google.protobuf.Empty) {
    }
    // Approve or de-approve another address as the operator of all NFTs of a certain protocol.
    rpc ApproveProtocol (ApproveProtocolInput) returns (google.protobuf.Empty) {
    }
    // Destroy nfts.
    rpc Burn (BurnInput) returns (google.protobuf.Empty) {
    }
    // Lock several nfts and fts to mint one nft.
    rpc Assemble (AssembleInput) returns (aelf.Hash) {
    }
    // Disassemble one assembled nft to get locked nfts and fts back.
    rpc Disassemble (DisassembleInput) returns (google.protobuf.Empty) {
    }
    // Modify metadata of one nft.
    rpc Recast (RecastInput) returns (google.protobuf.Empty) {
    }

    rpc AddMinters (AddMintersInput) returns (google.protobuf.Empty) {
    }
    rpc RemoveMinters (RemoveMintersInput) returns (google.protobuf.Empty) {
    }
    
    rpc AddNFTType (AddNFTTypeInput) returns (google.protobuf.Empty) {
    }
    rpc RemoveNFTType (google.protobuf.StringValue) returns (google.protobuf.Empty) {
    }

    rpc GetNFTProtocolInfo (google.protobuf.StringValue) returns (NFTProtocolInfo) {
        option (aelf.is_view) = true;
    }
    rpc GetNFTInfo (GetNFTInfoInput) returns (NFTInfo) {
        option (aelf.is_view) = true;
    }
    rpc GetNFTInfoByTokenHash (aelf.Hash) returns (NFTInfo) {
        option (aelf.is_view) = true;
    }
    rpc GetBalance (GetBalanceInput) returns (GetBalanceOutput) {
        option (aelf.is_view) = true;
    }
    rpc GetBalanceByTokenHash (GetBalanceByTokenHashInput) returns (GetBalanceOutput) {
        option (aelf.is_view) = true;
    }
    rpc GetAllowance (GetAllowanceInput) returns (GetAllowanceOutput) {
        option (aelf.is_view) = true;
    }
    rpc GetAllowanceByTokenHash (GetAllowanceByTokenHashInput) returns (GetAllowanceOutput) {
        option (aelf.is_view) = true;
    }
    rpc GetMinterList (google.protobuf.StringValue) returns (MinterList) {
        option (aelf.is_view) = true;
    }
    rpc CalculateTokenHash (CalculateTokenHashInput) returns (aelf.Hash) {
        option (aelf.is_view) = true;
    }
    rpc GetNFTTypes (google.protobuf.Empty) returns (NFTTypes) {
        option (aelf.is_view) = true;
    }
    rpc GetOperatorList (GetOperatorListInput) returns (AddressList) {
        option (aelf.is_view) = true;
    }
}

// Structs
message NFTTypes {
    map<string, string> value = 1;
}

// Inputs
message CreateInput {
    // The type of this nft protocol.
    string nft_type = 1;
    // The name of this nft protocol.
    string protocol_name = 2;
    // The total supply of the token.
    int64 total_supply = 3;
    // The address that created the token.
    aelf.Address creator = 4;
    // A flag indicating if this token is burnable.
    bool is_burnable = 5;
    // The chain id of the token.
    int32 issue_chain_id = 6;
    // The metadata of the token.
    Metadata metadata = 7;
    // Base Uri.
    string base_uri = 8;
    // Is token id can be reused.
    bool is_token_id_reuse = 9;
    // Initial minter list (creator will be added automatically)
    MinterList minter_list = 10;
}

message CrossChainCreateInput {
    string symbol = 1;
}

message TransferInput {
    aelf.Address to = 1;
    string symbol = 2;
    int64 token_id = 3;
    string memo = 4;
    int64 amount = 5;
}

message TransferFromInput {
    aelf.Address from = 1;
    aelf.Address to = 2;
    string symbol = 3;
    int64 token_id = 4;
    string memo = 5;
    int64 amount = 6;
}

message ApproveInput {
    aelf.Address spender = 1;
    string symbol = 2;
    int64 token_id = 3;
    int64 amount = 4;
}

message UnApproveInput {
    aelf.Address spender = 1;
    string symbol = 2;
    int64 token_id = 3;
    int64 amount = 4;
}

message ApproveProtocolInput {
    aelf.Address operator = 1;
    string symbol = 2;
    bool approved = 3;
}

message AddressList {
    repeated aelf.Address value = 1;
}

message GetOperatorListInput {
    string symbol = 1;
    aelf.Address owner = 2;
}

message BurnInput {
    string symbol = 1;
    int64 token_id = 2;
    int64 amount = 3;
}

message AssembleInput {
    string symbol = 1;
    aelf.Address owner = 2;
    string uri = 3;
    string alias = 4;
    Metadata metadata = 5;
    AssembledNfts assembled_nfts = 6;
    AssembledFts assembled_fts = 7;
    int64 token_id = 8;
}

message DisassembleInput {
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address owner = 3;
}

message MinterList {
    repeated aelf.Address value = 1;
}

message MintInput {
    string symbol = 1;
    aelf.Address owner = 2;
    string uri = 3;
    string alias = 4;
    Metadata metadata = 5;
    int64 quantity = 6;
    int64 token_id = 7;
}

message GetBalanceInput {
    aelf.Address owner = 1;
    string symbol = 2;
    int64 token_id = 3;
}

message GetBalanceByTokenHashInput {
    aelf.Address owner = 1;
    aelf.Hash token_hash = 2;
}

message GetBalanceOutput {
    aelf.Address owner = 1;
    aelf.Hash token_hash = 2;
    int64 balance = 3;
}

message GetAllowanceInput {
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address owner = 3;
    aelf.Address spender = 4;
}

message GetAllowanceByTokenHashInput {
    aelf.Hash token_hash = 1;
    aelf.Address owner = 2;
    aelf.Address spender = 3;
}

message GetAllowanceOutput {
    aelf.Hash token_hash = 1;
    int64 allowance = 2;
    aelf.Address owner = 3;
    aelf.Address spender = 4;
}

message CalculateTokenHashInput {
    string symbol = 1;
    int64 token_id = 2;
}

message NFTProtocolInfo {
    // The symbol of the token.
    string symbol = 1;
    // The minted number of the token.
    int64 supply = 2;
    // The total number of the token.
    int64 total_supply = 3;
    // The address that creat the token.
    aelf.Address creator = 4;
    // Base Uri.
    string base_uri = 5;
    // A flag indicating if this token is burnable.
    bool is_burnable = 6;
    // The chain to mint this token.
    int32 issue_chain_id = 7;
    // The metadata of the token.
    Metadata metadata = 8;
    // NFT Type.
    string nft_type = 9;
    // Protocol name, aka token name in MultiToken Contract.
    string protocol_name = 10;
    // Is token id can be reused.
    bool is_token_id_reuse = 11;
    int64 issued = 12;
}

message NFTInfo {
    // The symbol of the protocol this nft belongs to.
    string symbol = 1;
    // The name of the protocol this nft belongs to.
    string protocol_name = 2;
    // Actually is the order of this token.
    int64 token_id = 3;
    // The address that creat the base token.
    aelf.Address creator = 4;
    // The addresses that mint this token.
    repeated aelf.Address minters = 5;
    // The metadata of the token.
    Metadata metadata = 6;
    // Minted amount.
    int64 quantity = 7;
    // Token Uri.
    string uri = 8;
    // Base Uri.
    string base_uri = 9;
    // Alias
    string alias = 10;
    // Is burned.
    bool is_burned = 11;
    // NFT Type
    string nft_type = 12;
}

enum NFTType {
    ANY = 0;
    ART = 1;
    MUSIC = 2;
    DOMAIN_NAMES = 3;
    VIRTUAL_WORLDS = 4;
    TRADING_CARDS = 5;
    COLLECTABLES = 6;
    SPORTS = 7;
    UTILITY = 8;
    BADGES = 9;
}

message Metadata {
    map<string, string> value = 1;
}

message AddMintersInput {
    MinterList minter_list = 1;
    string symbol = 2;
}

message RemoveMintersInput {
    MinterList minter_list = 1;
    string symbol = 2;
}

message GetNFTInfoInput {
    string symbol = 1;
    int64 token_id = 2;
}

message RecastInput {
    string symbol = 1;
    int64 token_id = 2;
    string uri = 3;
    string alias = 4;
    Metadata metadata = 5;
}

message AssembledNfts {
    map<string, int64> value = 1;
}

message AssembledFts {
    map<string, int64> value = 1;
}

message AddNFTTypeInput {
    string full_name = 1;
    string short_name = 2;
}

// Events

message NFTProtocolCreated {
    option (aelf.is_event) = true;
    // The symbol of this protocol.
    string symbol = 1;
    // The name of this protocol.
    string protocol_name = 2;
    // The total supply of the token.
    int64 total_supply = 3;
    // The address that created the token.
    aelf.Address creator = 4;
    // A flag indicating if this token is burnable.
    bool is_burnable = 5;
    // The chain id of the token.
    int32 issue_chain_id = 6;
    // The metadata of the token.
    Metadata metadata = 7;
    // Base Uri.
    string base_uri = 8;
    // Is token id can be reused.
    bool is_token_id_reuse = 9;
    string nft_type = 10;
}

message NFTMinted {
    option (aelf.is_event) = true;
    // The symbol of this protocol.
    string symbol = 1;
    // The name of this protocol.
    string protocol_name = 2;
    // Actually is the order of this token.
    int64 token_id = 3;
    // The address that creat the base token.
    aelf.Address creator = 4;
    // The address that mint this token.
    aelf.Address minter = 5;
    // The metadata of the token.
    Metadata metadata = 6;
    // The current owner of this nft.
    aelf.Address owner = 7;
    // Token Uri.
    string uri = 8;
    // Base Uri.
    string base_uri = 9;
    // Alias
    string alias = 10;
    // NFT Type
    string nft_type = 11;
    // Quantity
    int64 quantity = 12;
    int64 total_quantity = 13;
    aelf.Hash token_hash = 14;
}

message Transferred {
    option (aelf.is_event) = true;
    aelf.Address from = 1 [(aelf.is_indexed) = true];
    aelf.Address to = 2 [(aelf.is_indexed) = true];
    string symbol = 3 [(aelf.is_indexed) = true];
    int64 token_id = 4 [(aelf.is_indexed) = true];
    int64 amount = 5;
    string memo = 6;
}

message Approved {
    option (aelf.is_event) = true;
    aelf.Address owner = 1 [(aelf.is_indexed) = true];
    aelf.Address spender = 2 [(aelf.is_indexed) = true];
    string symbol = 3 [(aelf.is_indexed) = true];
    int64 token_id = 4 [(aelf.is_indexed) = true];
    int64 amount = 5;
}

message UnApproved {
    option (aelf.is_event) = true;
    aelf.Address owner = 1 [(aelf.is_indexed) = true];
    aelf.Address spender = 2 [(aelf.is_indexed) = true];
    string symbol = 3 [(aelf.is_indexed) = true];
    int64 token_id = 4 [(aelf.is_indexed) = true];
    int64 current_allowance = 5;
}

message Burned {
    option (aelf.is_event) = true;
    aelf.Address burner = 1 [(aelf.is_indexed) = true];
    string symbol = 2 [(aelf.is_indexed) = true];
    int64 token_id = 3 [(aelf.is_indexed) = true];
    int64 amount = 4;
}

message Recasted {
    option (aelf.is_event) = true;
    string symbol = 1 [(aelf.is_indexed) = true];
    int64 token_id = 2 [(aelf.is_indexed) = true];
    Metadata old_metadata = 3 [(aelf.is_indexed) = true];
    Metadata new_metadata = 4 [(aelf.is_indexed) = true];
    string alias = 5 [(aelf.is_indexed) = true];
    string uri = 6 [(aelf.is_indexed) = true];
}

message Assembled {
    option (aelf.is_event) = true;
    string symbol = 1 [(aelf.is_indexed) = true];
    int64 token_id = 2 [(aelf.is_indexed) = true];
    AssembledNfts assembled_nfts = 3 [(aelf.is_indexed) = true];
    AssembledFts assembled_fts = 4 [(aelf.is_indexed) = true];
}

message Disassembled {
    option (aelf.is_event) = true;
    string symbol = 1 [(aelf.is_indexed) = true];
    int64 token_id = 2 [(aelf.is_indexed) = true];
    AssembledNfts disassembled_nfts = 3 [(aelf.is_indexed) = true];
    AssembledFts disassembled_fts = 4 [(aelf.is_indexed) = true];
}

message NFTTypeAdded {
    option (aelf.is_event) = true;
    string full_name = 1;
    string short_name = 2;
}

message NFTTypeRemoved {
    option (aelf.is_event) = true;
    string short_name = 1;
}

message MinterListAdded {
    option (aelf.is_event) = true;
    MinterList minter_list = 1;
    string symbol = 2;
}

message MinterListRemoved {
    option (aelf.is_event) = true;
    MinterList minter_list = 1;
    string symbol = 2;
}