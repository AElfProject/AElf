/**
 * NFT contract.
 */
syntax = "proto3";

package nft;

import "aelf/core.proto";
import "aelf/options.proto";
import "acs1.proto";
import "transaction_fee.proto";
import "authority_info.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

option csharp_namespace = "AElf.Contracts.NFT";

service NFTContract {
    option (aelf.csharp_state) = "AElf.Contracts.NFT.NFTContractState";
    option (aelf.base) = "acs1.proto";

    // Create a new nft type.
    rpc Create (CreateInput) returns (google.protobuf.Empty) {
    }
    rpc Mint (MintInput) returns (aelf.Hash) {
    }
    rpc Transfer (TransferInput) returns (google.protobuf.Empty) {
    }
    rpc TransferFrom (TransferFromInput) returns (google.protobuf.Empty) {
    }
    rpc Approve (ApproveInput) returns (google.protobuf.Empty) {
    }
    rpc UnApprove (UnApproveInput) returns (google.protobuf.Empty) {
    }
    rpc Burn (BurnInput) returns (google.protobuf.Empty) {
    }
    rpc Assemble (AssembleInput) returns (aelf.Hash) {
    }
    rpc Disassemble (DisassembleInput) returns (google.protobuf.Empty) {
    }
    rpc Recast (RecastInput) returns (google.protobuf.Empty) {
    }

    rpc AddMinters (AddMintersInput) returns (google.protobuf.Empty) {
    }
    rpc RemoveMiners (RemoveMinersInput) returns (google.protobuf.Empty) {
    }

    rpc GetNFTInfo (GetNFTInfoInput) returns (NFTInfo) {
        option (aelf.is_view) = true;
    }
    rpc GetNFTInfoByTokenHash (aelf.Hash) returns (NFTInfo) {
        option (aelf.is_view) = true;
    }
}

message CreateInput {
    // The symbol of the token.
    NFTType nft_type = 1;
    // The full name of the token.
    string token_name = 2;
    // The total supply of the token.
    int64 total_supply = 3;
    // The address that created the token.
    aelf.Address creator = 5;
    // A flag indicating if this token is burnable.
    bool is_burnable = 6;
    // A whitelist address list used to lock tokens.
    repeated aelf.Address lock_white_list = 7;
    // The chain id of the token.
    int32 issue_chain_id = 8;
    // The metadata of the token.
    Metadata meta_data = 9;
    // Base Uri.
    string base_uri = 10;
}

message TransferInput {
    aelf.Address to = 1;
    string symbol = 2;
    int64 token_id = 3;
    string memo = 4;
}

message TransferFromInput {
    aelf.Address from = 1;
    aelf.Address to = 2;
    string symbol = 3;
    int64 token_id = 4;
    string memo = 5;
}

message ApproveInput {
    aelf.Address spender = 1;
    string symbol = 2;
    int64 token_id = 3;
}

message UnApproveInput {
    aelf.Address spender = 1;
    string symbol = 2;
    int64 token_id = 3;
}

message BurnInput {
    string symbol = 1;
    int64 token_id = 2;
}

message AssembleInput {
    string symbol = 1;
    aelf.Address owner = 2;
    string uri = 3;
    string alias = 4;
    Metadata metadata = 5;
    AssembledNfts assembled_nfts = 6;
    AssembledFts assembled_fts = 7;
}

message DisassembleInput {
    string symbol = 1;
    int64 token_id = 2;
}

message MinterList {
    repeated aelf.Address value = 1;
}

message MintInput {
    string symbol = 1;
    aelf.Address owner = 2;
    string uri = 3;
    string alias = 4;
    Metadata metadata = 5;
}

message NFTProtocolInfo {
    // The symbol of the token.
    string symbol = 1;
    // The minted number of the token.
    int64 minted_count = 2;
    // The total number of the token.
    int64 created_count = 3;
    // The address that creat the token.
    aelf.Address creator = 4;
    // Base Uri.
    string base_uri = 5;
    // The minters of this token.
    MinterList minter_list = 6;
    // A flag indicating if this token is burnable.
    bool is_burnable = 7;
    // The chain to mint this token.
    int32 issue_chain_id = 8;
    // The metadata of the token.
    Metadata metadata = 9;
    // NFT Type.
    NFTType nft_type = 10;
}

message NFTInfo {
    // The symbol of the token.
    string symbol = 1;
    // The full name of the token.
    string token_name = 2;
    // Actually is the order of this token.
    int64 token_id = 3;
    // The address that creat the base token.
    aelf.Address creator = 4;
    // The address that mint this token.
    aelf.Address minter = 5;
    // The metadata of the token.
    Metadata metadata = 8;
    // The current owner of this nft.
    aelf.Address owner = 9;
    // Token Uri.
    string uri = 10;
    // Base Uri.
    string base_uri = 11;
    // Alias
    string alias = 12;
    // Is burned.
    bool is_burned = 13;
    // NFT Type
    NFTType nft_type = 14;
}

enum NFTType {
    ANY = 0;
    ART = 1;
    MUSIC = 2;
    DOMAIN_NAMES = 3;
    VIRTUAL_WORLDS = 4;
    TRADING_CARDS = 5;
    COLLECTABLES = 6;
    SPORTS = 7;
    UTILITY = 8;
    CERTIFICATE = 9;
}

message Metadata {
    map<string, string> value = 1;
}

message AddMintersInput {
    MinterList minter_list = 1;
    string symbol = 2;
}

message RemoveMinersInput {
    MinterList minter_list = 1;
    string symbol = 2;
}

message GetNFTInfoInput {
    string symbol = 1;
    int64 token_id = 2;
}

message RecastInput {
    string symbol = 1;
    int64 token_id = 2;
    string uri = 3;
    string alias = 4;
    Metadata metadata = 5;
}

message AssembledNfts {
    repeated aelf.Hash value = 1;
}

message AssembledFts {
    map<string, int64> value = 1;
}

// Events

message NFTProtocolCreated {
    option (aelf.is_event) = true;
    // The symbol of the token.
    string symbol = 1;
    // The full name of the token.
    string token_name = 2;
    // The total supply of the token.
    int64 total_supply = 3;
    // The address that created the token.
    aelf.Address issuer = 4;
    // A flag indicating if this token is burnable.
    bool is_burnable = 5;
    // The chain id of the token.
    int32 issue_chain_id = 6;
    // The metadata of the token.
    Metadata meta_data = 7;
    // Base Uri.
    string base_uri = 8;
}

message NFTMinted {
    option (aelf.is_event) = true;
    // The symbol of the token.
    string symbol = 1;
    // The full name of the token.
    string token_name = 2;
    // Actually is the order of this token.
    int64 token_id = 3;
    // The address that creat the base token.
    aelf.Address creator = 4;
    // The address that mint this token.
    aelf.Address minter = 5;
    // The metadata of the token.
    Metadata metadata = 8;
    // The current owner of this nft.
    aelf.Address owner = 9;
    // Token Uri.
    string uri = 10;
    // Base Uri.
    string base_uri = 11;
    // Alias
    string alias = 12;
    // Is burned.
    bool is_burned = 13;
    // NFT Type
    NFTType nft_type = 14;
}