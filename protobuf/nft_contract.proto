/**
 * NFT contract.
 */
syntax = "proto3";

package nft;

import "aelf/core.proto";
import "aelf/options.proto";
import "acs1.proto";
import "acs2.proto";
import "transaction_fee.proto";
import "authority_info.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

option csharp_namespace = "AElf.Contracts.NFT";

service NFTContract {
    option (aelf.csharp_state) = "AElf.Contracts.NFT.NFTContractState";
    option (aelf.base) = "acs1.proto";
    option (aelf.base) = "acs2.proto";

    // Create a new nft type.
    rpc Create (CreateInput) returns (google.protobuf.Empty) {
    }
    rpc Issue (IssueInput) returns (google.protobuf.Empty) {
    }
    rpc Transfer (TransferInput) returns (google.protobuf.Empty) {
    }
    rpc TransferFrom (TransferFromInput) returns (google.protobuf.Empty) {
    }
    rpc Approve (ApproveInput) returns (google.protobuf.Empty) {
    }
    rpc UnApprove (UnApproveInput) returns (google.protobuf.Empty) {
    }
    rpc Lock (LockInput) returns (google.protobuf.Empty) {
    }
    rpc Unlock (UnlockInput) returns (google.protobuf.Empty) {
    }
    rpc Burn (BurnInput) returns (google.protobuf.Empty) {
    }
    rpc ChangeTokenIssuer (ChangeTokenIssuerInput) returns (google.protobuf.Empty) {
    }
    rpc CrossChainTransfer (CrossChainTransferInput) returns (google.protobuf.Empty) {
    }
    rpc CrossChainReceiveToken (CrossChainReceiveTokenInput) returns (google.protobuf.Empty) {
    }
    rpc CrossChainCreateToken(CrossChainCreateTokenInput) returns (google.protobuf.Empty) {        
    }

    // Query token information.
    rpc GetNFTInfo (GetNFTInfoInput) returns (NFTInfo) {
        option (aelf.is_view) = true;
    }
    
    // Query the balance at the specified address.
    rpc GetBalance (GetBalanceInput) returns (GetBalanceOutput) {
        option (aelf.is_view) = true;
    }

    // Query the account's allowance for other addresses
    rpc GetAllowance (GetAllowanceInput) returns (GetAllowanceOutput) {
        option (aelf.is_view) = true;
    }
    
    // Query the information for a lock.
    rpc GetLockedAmount (GetLockedAmountInput) returns (GetLockedAmountOutput) {
        option (aelf.is_view) = true;
    }
    
    // Query the address of receiving token in cross-chain transfer.
    rpc GetCrossChainTransferTokenContractAddress (GetCrossChainTransferTokenContractAddressInput) returns (aelf.Address) {
        option (aelf.is_view) = true;
    }
}

message NFTInfo {
    // The symbol of the token.f
    string symbol = 1;
    // The full name of the token.
    string token_name = 2;
    // The current supply of the token.
    int64 supply = 3;
    // The total supply of the token.
    int64 total_supply = 4;
    // The address that created the token.
    aelf.Address issuer = 6;
    // A flag indicating if this token is burnable.
    bool is_burnable = 7;
    // The chain id of the token.
    int32 issue_chain_id = 8;
    // The amount of issued tokens.
    int64 issued = 9;
    // The external information of the token.
    ExternalInfo external_info = 10;
}

message CreateInput {
    // The symbol of the token.
    NFTType nft_type = 1;
    // The full name of the token.
    string token_name = 2;
    // The total supply of the token.
    int64 total_supply = 3;
    // The address that created the token.
    aelf.Address issuer = 5;
    // A flag indicating if this token is burnable.
    bool is_burnable = 6;
    // A whitelist address list used to lock tokens.
    repeated aelf.Address lock_white_list = 7;
    // The chain id of the token.
    int32 issue_chain_id = 8;
    // The external information of the token.
    ExternalInfo external_info = 9;
}

enum NFTType {
    ANY = 0;
    ART = 1;
    GAME = 2;
    CERT = 3;
    TICKET = 4;
}

message IssueInput {
    // The token symbol to issue.
    string symbol = 1;
    // The token amount to issue.
    int64 amount = 2;
    // The memo.
    string memo = 3;
    // The target address to issue.
    aelf.Address to = 4;
}

message TransferInput {
    // The receiver of the token.
    aelf.Address to = 1;
    // The token symbol to transfer.
    string symbol = 2;
    // The amount to to transfer.
    int64 amount = 3;
    // The memo.
    string memo = 4;
}

message LockInput {
    // The one want to lock his token.
    aelf.Address address = 1; 
    // Id of the lock.
    aelf.Hash lock_id = 2;
    // The symbol of the token to lock.
    string symbol = 3;
    // a memo.
    string usage = 4;
    // The amount of tokens to lock.
    int64 amount = 5;
}

message UnlockInput {
    // The one want to un-lock his token.
    aelf.Address address = 1;
    // Id of the lock.
    aelf.Hash lock_id = 2;
    // The symbol of the token to un-lock.
    string symbol = 3;
    // a memo.
    string usage = 4;
    // The amount of tokens to un-lock.
    int64 amount = 5;
}

message TransferFromInput {
    // The source address of the token.
    aelf.Address from = 1;
    // The destination address of the token.
    aelf.Address to = 2;
    // The symbol of the token to transfer.
    string symbol = 3;
    // The amount to transfer.
    int64 amount = 4;
    // The memo.
    string memo = 5;
}

message ApproveInput {
    // The address that allowance will be increased. 
    aelf.Address spender = 1;
    // The symbol of token to approve.
    string symbol = 2;
    // The amount of token to approve.
    int64 amount = 3;
}

message UnApproveInput {
    // The address that allowance will be decreased. 
    aelf.Address spender = 1;
    // The symbol of token to un-approve.
    string symbol = 2;
    // The amount of token to un-approve.
    int64 amount = 3;
}

message BurnInput {
    // The symbol of token to burn.
    string symbol = 1;
    // The amount of token to burn.
    int64 amount = 2;
}

message GetNFTInfoInput {
    // The symbol of token.
    string symbol = 1;
}

message GetBalanceInput {
    // The symbol of token.
    string symbol = 1;
    // The target address of the query.
    aelf.Address owner = 2;
}

message GetBalanceOutput {
    // The symbol of token.
    string symbol = 1;
    // The target address of the query.
    aelf.Address owner = 2;
    // The balance of the owner.
    int64 balance = 3;
}

message GetAllowanceInput {
    // The symbol of token.
    string symbol = 1;
    // The address of the token owner.
    aelf.Address owner = 2;
    // The address of the spender.
    aelf.Address spender = 3;
}

message GetAllowanceOutput {
    // The symbol of token.
    string symbol = 1;
    // The address of the token owner.
    aelf.Address owner = 2;
    // The address of the spender.
    aelf.Address spender = 3;
    // The amount of allowance.
    int64 allowance = 4;
}

message CrossChainTransferInput {
    // The receiver of transfer.
    aelf.Address to = 1;
    // The symbol of token.
    string symbol = 2;
    // The amount of token to transfer.
    int64 amount = 3;
    // The memo.
    string memo = 4;
    // The destination chain id.
    int32 to_chain_id = 5;
    // The chain id of the token.
    int32 issue_chain_id = 6;
}

message CrossChainReceiveTokenInput {
    // The source chain id.
    int32 from_chain_id = 1;
    // The height of the transfer transaction.
    int64 parent_chain_height = 2;
    // The raw bytes of the transfer transaction.
    bytes transfer_transaction_bytes = 3;
    // The merkle path created from the transfer transaction.
    aelf.MerklePath merkle_path = 4;
}

message GetLockedAmountInput {
    // The address of the lock.
    aelf.Address address = 1;
    // The token symbol.
    string symbol = 2;
    // The id of the lock.
    aelf.Hash lock_id = 3;
}

message GetLockedAmountOutput {
    // The address of the lock.
    aelf.Address address = 1;
    // The token symbol.
    string symbol = 2;
    // The id of the lock.
    aelf.Hash lock_id = 3;
    // The locked amount.
    int64 amount = 4;
}

message GetCrossChainTransferTokenContractAddressInput {
    // The chain id.
    int32 chainId = 1;
}

message CrossChainCreateTokenInput {
    // The chain id of the chain on which the token was created.
    int32 from_chain_id = 1;
    // The height of the transaction that created the token.
    int64 parent_chain_height = 2;
    // The transaction that created the token.
    bytes transaction_bytes = 3;
    // The merkle path created from the transaction that created the transaction.
    aelf.MerklePath merkle_path = 4;
}

message TotalResourceTokensMaps {
    // Resource tokens to charge.
    repeated ContractTotalResourceTokens value = 1;
    // The hash of the block processing the transaction.
    aelf.Hash block_hash = 2;
    // The height of the block processing the transaction.
    int64 block_height = 3;
}

message ContractTotalResourceTokens {
    // The contract address.
    aelf.Address contract_address = 1;
    // Resource tokens to charge.
    TotalResourceTokensMap tokens_map = 2;
}

message TotalResourceTokensMap {
    // Resource token dictionary, Symbol->Amount.
    map<string, int64> value = 1;
}

message ChangeTokenIssuerInput {
    // The token symbol.
    string symbol = 1;
    // The new token issuer for change.
    aelf.Address new_token_Issuer = 2;
}

message ExternalInfo {
    map<string, string> value = 1;
}

// Events

message Transferred {
    option (aelf.is_event) = true;
    // The source address of the transferred token.
    aelf.Address from = 1 [(aelf.is_indexed) = true];
    // The destination address of the transferred token.
    aelf.Address to = 2 [(aelf.is_indexed) = true];
    // The symbol of the transferred token.
    string symbol = 3 [(aelf.is_indexed) = true];
    // The amount of the transferred token.
    int64 amount = 4;
    // The memo.
    string memo = 5;
}

message Approved {
    option (aelf.is_event) = true;
    // The address of the token owner.
    aelf.Address owner = 1 [(aelf.is_indexed) = true];
    // The address that allowance be increased. 
    aelf.Address spender = 2 [(aelf.is_indexed) = true];
    // The symbol of approved token.
    string symbol = 3 [(aelf.is_indexed) = true];
    // The amount of approved token.
    int64 amount = 4;
}

message UnApproved {
    option (aelf.is_event) = true;
    // The address of the token owner.
    aelf.Address owner = 1 [(aelf.is_indexed) = true];
    // The address that allowance be decreased. 
    aelf.Address spender = 2 [(aelf.is_indexed) = true];
    // The symbol of un-approved token.
    string symbol = 3 [(aelf.is_indexed) = true];
    // The amount of un-approved token.
    int64 amount = 4;
}

message Burned {
    option (aelf.is_event) = true;
    // The address who wants to burn token.
    aelf.Address burner = 1 [(aelf.is_indexed) = true];
    // The symbol of burned token. 
    string symbol = 2 [(aelf.is_indexed) = true];
    // The amount of burned token. 
    int64 amount = 3;
}

message TokenCreated {
    option (aelf.is_event) = true;
    // The symbol of the token.
    string symbol = 1;
    // The full name of the token.
    string token_name = 2;
    // The total supply of the token.
    int64 total_supply = 3;
    // The address that created the token.
    aelf.Address issuer = 5;
    // A flag indicating if this token is burnable.
    bool is_burnable = 6;
    // The chain id of the token.
    int32 issue_chain_id = 7;
    // The external information of the token.
    ExternalInfo external_info = 8;
}

message Issued {
    option (aelf.is_event) = true;
    // The symbol of issued token.
    string symbol = 1;
    // The amount of issued token.
    int64 amount = 2;
    // The memo.
    string memo = 3;
    // The issued target address.
    aelf.Address to = 4;
}

message CrossChainTransferred {
    option (aelf.is_event) = true;
    // The source address of the transferred token.
    aelf.Address from = 1;
    // The destination address of the transferred token.
    aelf.Address to = 2;
    // The symbol of the transferred token.
    string symbol = 3;
    // The amount of the transferred token.
    int64 amount = 4;
    // The memo.
    string memo = 5;
    // The destination chain id.
    int32 to_chain_id = 6;
    // The chain id of the token.
    int32 issue_chain_id = 7;
}

message CrossChainReceived {
    option (aelf.is_event) = true;
    // The source address of the transferred token.
    aelf.Address from = 1;
    // The destination address of the transferred token.
    aelf.Address to = 2;
    // The symbol of the received token.
    string symbol = 3;
    // The amount of the received token.
    int64 amount = 4;
    // The memo.
    string memo = 5;
    // The destination chain id.
    int32 from_chain_id = 6;
    // The chain id of the token.
    int32 issue_chain_id = 7;
    // The parent chain height of the transfer transaction.
    int64 parent_chain_height = 8;
}