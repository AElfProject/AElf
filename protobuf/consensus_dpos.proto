syntax = "proto3";

option csharp_namespace = "AElf.Consensus.DPoS";

import "common.proto";
import "google/protobuf/timestamp.proto";

// Just used as parameter of consensus contract method.
message Term {
    Miners Miners = 1;
    Round FirstRound = 2;
    Round SecondRound = 3;
    int32 MiningInterval = 4;
    int64 TermNumber = 5;
    google.protobuf.Timestamp Timestamp = 6;
}

// Just used as parameter of consensus contract method.
message ToUpdate {
    Hash OutValue = 1;// Calculated from current in value.
    Hash Signature = 2;// Calculated from current in value and 
    int64 RoundId = 3;// To ensure the values to update will be apply to correct round by comparing round id.
    int32 PromiseTinyBlocks = 4;// By default, this value is 1, except this miner wanna produce tiny blocks in one time slot.
    Hash PreviousInValue = 5;// Publish previous in value for validation previous signature and previous out value.
}

// The miners public key list for each term.
message Miners {
    int64 TermNumber = 1;
    repeated string PublicKeys = 2;
    repeated Address Addresses = 3;
}

// To query to first round number of each term.
message TermNumberLookUp {
    map<int64, int64> Map = 1;// Term number -> Round number.
}

// All the candidates.
message Candidates {
    repeated string PublicKeys = 1;
    repeated Address Addresses = 2;
    bool IsInitialMiners = 3;
}

// The ticket / voting information for one user.
message Tickets {
    repeated VotingRecord VotingRecords = 1;
    int64 VotingRecordsCount = 2;
    int64 ObtainedTickets = 3;
    int64 VotedTickets = 4;
    int64 HistoryObtainedTickets = 5;
    int64 HistoryVotedTickets = 6;
    string Remark = 7;
    repeated Hash VoteToTransactions = 8;
    repeated Hash VoteFromTransactions = 9;
    string PublicKey = 10;
}

// A voting record.
message VotingRecord {
    string From = 1;
    string To = 2;
    int64 Count = 3;
    int64 RoundNumber = 4;
    Hash TransactionId = 5;
    int64 VoteAge = 6;
    repeated int32 LockDaysList = 7;// Can be renewed by adding items.
    int64 UnlockAge = 8;
    int64 TermNumber = 9;
    google.protobuf.Timestamp UnlockTimestamp = 10;
    google.protobuf.Timestamp WithdrawTimestamp = 11;
    google.protobuf.Timestamp VoteTimestamp = 12;
    bool IsWithdrawn = 13;
}

// The snap shot of one term.
message TermSnapshot {
    int64 EndRoundNumber = 1;
    int64 TotalBlocks = 2;
    repeated CandidateInTerm CandidatesSnapshot = 3;
    int64 TermNumber = 4;
    string Remark = 5;
}

// The information of a candidate of a specific term.
message CandidateInTerm {
    string PublicKey = 1;
    Address Address = 2;
    int64 Votes = 3;
}

// The information of a round.
message Round {
    int64 RoundNumber = 1;
    map<string, MinerInRound> RealTimeMinersInformation = 2;
    int64 BlockchainAge = 4;
    string ExtraBlockProducerOfPreviousRound = 7;
    int64 TermNumber = 8;
}

// The information of a miner in a specific round.
message MinerInRound {
    int32 Order = 1;
    bool IsExtraBlockProducer = 2;
    Hash InValue = 3;
    Hash OutValue = 4;
    Hash Signature = 5;
    google.protobuf.Timestamp ExpectedMiningTime = 6;
    int64 ProducedBlocks = 7;
    bool IsForked = 8;
    int64 MissedTimeSlots = 9;
    int64 RoundNumber = 10;
    string PublicKey = 11;
    int64 PackagedTxsCount = 12;
    int64 LatestMissedTimeSlots = 13;
    bool IsMissed = 14;
    int32 PromisedTinyBlocks = 16;
    string Alias = 17;
    Hash PreviousInValue = 18;
    int32 OrderOfNextRound = 19;
    google.protobuf.Timestamp ActualMiningTime = 20;// Miners must fill actual mining time when they do the mining.
}

// The information of a candidate.
message CandidateInHistory {
    string PublicKey = 1;
    repeated int64 Terms = 2;
    int64 ProducedBlocks = 3;
    int64 MissedTimeSlots = 4;
    int64 ContinualAppointmentCount = 5;
    int64 ReappointmentCount = 6;
    repeated string Aliases = 7;
    string CurrentAlias = 8;
    int64 CurrentVotesNumber = 9;
    string Remark = 10;
    Address Address = 11;
}

message TicketsDictionary {
    map<string, Tickets> Maps = 1;
    string Remark = 2;
}

message CandidateInHistoryDictionary {
    map<string, CandidateInHistory> Maps = 1;
    string Remark = 2;
    int32 CandidatesNumber = 3;
}

message TicketsHistories {
    repeated TicketsHistory Values = 1;
    int64 HistoriesNumber = 2;
    string Remark = 3;
}

message TicketsHistory {
    string CandidateAlias = 1;
    int64 VotesNumber = 2;
    google.protobuf.Timestamp Timestamp = 3;
    bool State = 4;
    TicketsHistoryType Type = 5;
}

enum TicketsHistoryType {
    None = 0;
    Redeem = 1;
    Vote = 2;
}

message DPoSInformation {
    string SenderPublicKey = 1;
    Round Round = 2;
    DPoSBehaviour Behaviour = 8;
}

message DPoSHint {
    DPoSBehaviour Behaviour = 1;
}

enum DPoSBehaviour {
    InitialConsensus = 0;
    UpdateValue = 1;
    NextRound = 2;
    NextTerm = 3;
    Invalid = 4;
}

message DPoSTriggerInformation {
    string PublicKey = 1;// A must-have.
    google.protobuf.Timestamp Timestamp = 2;// A must-have.
    
    bool IsBootMiner = 3;// Only useful when initial one chain.
    int32 MiningInterval = 4;// For the boot miner to set mining interval, usually it's 4000 (ms).
    repeated string Miners = 5;// For the boot miner or miner gonna commit to change term to set miners of new round.

    Hash CurrentInValue = 6;// To calculate Out Value and generate hash chunks to other online miners.
    Hash PreviousInValue = 7;// Publish In Value of previous round for validating the miner's signature.
    int64 InitialTermNumber = 8;
}