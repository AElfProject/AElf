syntax = "proto3";

import "aelf/options.proto";
import "aelf/core.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "acs1.proto";

option csharp_namespace = "AElf.Contracts.TestContract.VirtualAddress";

service VirtualAddressContract {
  option (aelf.csharp_state) = "AElf.Contracts.TestContract.VirtualAddress.State";
  option (aelf.base) = "acs1.proto";
  
  rpc VirtualAddressVote(VirtualAddressVoteInput) returns (google.protobuf.Empty);
  rpc VirtualAddressWithdraw(aelf.Hash) returns (google.protobuf.Empty);
  rpc VirtualAddressChangeVotingOption(VirtualAddressChangeVotingOptionInput) returns (google.protobuf.Empty);
  rpc VirtualAddressClaimProfit(VirtualAddressClaimProfitInput) returns (google.protobuf.Empty);
  rpc ForwardCall(ForwardCallInput) returns (google.protobuf.Empty);
  
  rpc GetVirtualAddress(google.protobuf.Empty) returns (aelf.Address) {
    option (aelf.is_view) = true;
  }
}

message VirtualAddressVoteInput {
  string pub_key = 1;
  int64 amount = 2;
  google.protobuf.Timestamp end_timestamp = 3;
  // Used to generate vote id.
  aelf.Hash token = 4;
}

message VirtualAddressChangeVotingOptionInput {
  bool is_reset = 1;
  aelf.Hash vote_id = 2;
  string pub_key = 3;
}

message VirtualAddressClaimProfitInput {
  aelf.Hash scheme_id = 1;
  aelf.Address beneficiary = 2;
}

message ForwardCallInput {
  aelf.Hash virtual_address = 1;
  aelf.Address contract_address = 2;
  string method_name = 3;
  bytes args = 4;
}