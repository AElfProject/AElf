/**
 * NFT Market Contract.
 */
syntax = "proto3";

package NFTMinter;

import "aelf/core.proto";
import "aelf/options.proto";
import "acs1.proto";
import "transaction_fee.proto";
import "authority_info.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "AElf.Contracts.NFTMinter";

service NFTMinterContract {
    option (aelf.csharp_state) = "AElf.Contracts.NFTMinter.NFTMinterContractState";
    option (aelf.base) = "acs1.proto";

    rpc Initialize (InitializeInput) returns (google.protobuf.Empty) {
    }
    
    // Mint the first one badge.
    rpc CreateBadge (CreateBadgeInput) returns (google.protobuf.Empty) {
    }
    // User mint a badge for himself or anyone else. (Owner must in whitelist if the whitelist is set.)
    rpc MintBadge (MintBadgeInput) returns (google.protobuf.Empty) {
    }
    // Initial or reset badge info.
    rpc ConfigBadge (ConfigBadgeInput) returns (google.protobuf.Empty) {
    }
    // Add or remove minting white list.
    rpc ManageMintingWhiteList (ManageMintingWhiteListInput) returns (google.protobuf.Empty) {
    }
    
    // Blind box.
    rpc Box (BoxInput) returns (google.protobuf.Empty) {
    }
    rpc Unbox (UnboxInput) returns (google.protobuf.Empty) {
    }

    rpc GetBadgeInfo (GetBadgeInfoInput) returns (BadgeInfo) {
        option (aelf.is_view) = true;
    }
    rpc IsInMintingWhiteList (IsInMintingWhiteListInput) returns (google.protobuf.BoolValue) {
        option (aelf.is_view) = true;
    }
    rpc GetBlindBoxInfo (GetBlindBoxInfoInput) returns (BlindBoxInfo) {
        option (aelf.is_view) = true;
    }
}

// Structs.

message BadgeInfo {
    string symbol = 1;
    int64 token_id = 2;
    bool is_public = 3;
    google.protobuf.Timestamp start_time = 4;
    google.protobuf.Timestamp end_time = 5;
    int64 limit = 6;
    int64 minted = 7;
    string badge_name = 8;
    aelf.Address badge_creator = 9;
}

message BadgeMetadata {
    map<string, string> value = 1;
}

message AddressList {
    repeated aelf.Address value = 1;
}

message MintFee {
    string symbol = 1;
    int64 amount = 2;
}

message BlindBoxInfo {
    string symbol = 1;
    NFTTemplateList template_list = 2;
    string cost_symbol = 3;
    int64 cost_token_id = 4;
    int64 cost_amount = 5;
    aelf.Address cost_receiver = 6;
    int64 start_token_id = 7;
    int64 supposed_end_token_id = 8;
    bool is_token_id_fixed = 9;
    int64 total_weights = 10;
}

message NFTTemplateList {
    repeated NFTTemplate value = 1;
}

message NFTTemplate {
    string symbol = 1;
    TemplateMetadata metadata = 2;
    int64 quantity = 3;
    int64 weight = 4;
    string uri = 5;
    string alias = 6;
    int64 token_id = 7;
    int64 minted_quantity = 8;
}

message TemplateMetadata {
    map<string, string> value = 1;
}

message Int64List {
    repeated int64 value = 1;
}

// Inputs.

message InitializeInput {
    aelf.Address nft_contract_address = 1;
    aelf.Address admin_address = 2;
    aelf.Address random_number_provider_contract_address = 3;
}

message CreateBadgeInput {
    string symbol = 1;
    int64 token_id = 2;
    string uri = 3;
    string alias = 4;
    BadgeMetadata metadata = 5;
    aelf.Address owner = 6;
}

message MintBadgeInput {
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address owner = 3;
}

message ManageMintingWhiteListInput {
    string symbol = 1;
    int64 token_id = 2;
    bool is_remove = 3;
    AddressList address_list = 4;
}

message ConfigBadgeInput {
    string symbol = 1;
    int64 token_id = 2;
    bool is_public = 3;
    int64 limit = 4;
    google.protobuf.Timestamp start_time = 5;
    google.protobuf.Timestamp end_time = 6;
    MintFee mint_fee = 7;
}

message GetBadgeInfoInput {
    string symbol = 1;
    int64 token_id = 2;
}

message IsInMintingWhiteListInput {
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address address = 3;
}

message BoxInput {
    string symbol = 1;
    NFTTemplateList template_list = 2;
    string cost_symbol = 3;
    int64 cost_token_id = 4;
    int64 cost_amount = 5;
    aelf.Address cost_receiver = 6;
    int32 index = 7;
    bool is_token_id_fixed = 8;
}

message UnboxInput {
    string symbol = 1;
    int32 index = 2;
}

message GetBlindBoxInfoInput {
    string symbol = 1;
    int32 index = 2;
}

// Events

message BadgeInfoChanged {
    option (aelf.is_event) = true;
    string symbol = 1;
    int64 token_id = 2;
    bool is_public = 3;
    int64 limit = 4;
    google.protobuf.Timestamp start_time = 5;
    google.protobuf.Timestamp end_time = 6;
}

message MintingWhiteListChanged {
    option (aelf.is_event) = true;
    string symbol = 1;
    int64 token_id = 2;
    bool is_remove = 3;
    AddressList address_list = 4;
}

message BlindBoxForged {
    option (aelf.is_event) = true;
    string symbol = 1;
    NFTTemplateList template_list = 2;
    string cost_symbol = 3;
    int64 cost_token_id = 4;
    int64 cost_amount = 5;
    aelf.Address cost_receiver = 6;
    int64 start_token_id = 7;
    int64 supposed_end_token_id = 8;
    bool is_token_id_fixed = 9;
}

message BlindBoxOpened {
    option (aelf.is_event) = true;
}