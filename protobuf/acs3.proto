syntax = "proto3";

package acs3;

import public "aelf/core.proto";
import "aelf/options.proto";
import "google/protobuf/empty.proto";
import public "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option (aelf.identity) = "acs3";
option csharp_namespace = "AElf.Standards.ACS3";

service AuthorizationContract {
    rpc CreateProposal (CreateProposalInput) returns (aelf.Hash) {
    }
    rpc Approve (aelf.Hash) returns (google.protobuf.Empty) {
    }
    rpc Reject(aelf.Hash) returns (google.protobuf.Empty) {
    }
    rpc Abstain(aelf.Hash) returns (google.protobuf.Empty){
    }
    rpc Release(aelf.Hash) returns (google.protobuf.Empty){
    }
    rpc ChangeOrganizationThreshold(ProposalReleaseThreshold)returns(google.protobuf.Empty) {
    }
    rpc ChangeOrganizationProposerWhiteList(ProposerWhiteList) returns (google.protobuf.Empty){
    }
    rpc CreateProposalBySystemContract(CreateProposalBySystemContractInput) returns (aelf.Hash){
    }
    rpc ClearProposal(aelf.Hash) returns (google.protobuf.Empty){
    }
    rpc GetProposal(aelf.Hash) returns (ProposalOutput) {
        option (aelf.is_view) = true;
    }
    rpc ValidateOrganizationExist(aelf.Address) returns (google.protobuf.BoolValue){
        option (aelf.is_view) = true;
    }
    rpc ValidateProposerInWhiteList(ValidateProposerInWhiteListInput) returns (google.protobuf.BoolValue){
        option (aelf.is_view) = true;
    }
}

message CreateProposalInput {
    string contract_method_name = 1;
    aelf.Address to_address = 2;
    bytes params = 3;
    google.protobuf.Timestamp expired_time = 4;
    aelf.Address organization_address = 5;
    string proposal_description_url = 6;
    aelf.Hash token = 7;
}

message ProposalOutput {
    aelf.Hash proposal_id = 1;
    string contract_method_name = 2;
    aelf.Address to_address = 3;
    bytes params = 4;
    google.protobuf.Timestamp expired_time = 5;
    aelf.Address organization_address = 6;
    aelf.Address proposer = 7;
    bool to_be_released = 8;
    int64 approval_count = 9;
    int64 rejection_count = 10;
    int64 abstention_count = 11;
}

message ProposalReleaseThreshold {
    int64 minimal_approval_threshold = 1;
    int64 maximal_rejection_threshold = 2;
    int64 maximal_abstention_threshold = 3;
    int64 minimal_vote_threshold = 4;
}

message ProposerWhiteList{
    repeated aelf.Address proposers = 1;
}

message OrganizationHashAddressPair{
    aelf.Hash organization_hash = 1;
    aelf.Address organization_address = 2;
}

message CreateProposalBySystemContractInput {
    acs3.CreateProposalInput proposal_input =1;
    aelf.Address origin_proposer = 2;
}

message ValidateProposerInWhiteListInput{
    aelf.Address proposer = 1;
    aelf.Address organization_address = 2;
}

message ProposalCreated{
    option (aelf.is_event) = true;
    aelf.Hash proposal_id = 1;
    aelf.Address organization_address=2 [(aelf.is_indexed) = true];
}

message ProposalReleased{
    option (aelf.is_event) = true;
    aelf.Hash proposal_id = 1;
    aelf.Address organization_address=2 [(aelf.is_indexed) = true];
}

message OrganizationCreated{
    option (aelf.is_event) = true;
    aelf.Address organization_address = 1;
}

message ReceiptCreated {
    option (aelf.is_event) = true;
    aelf.Hash proposal_id = 1;
    aelf.Address address = 2;
    string receipt_type = 3;
    google.protobuf.Timestamp time = 4;
    aelf.Address organization_address = 5 [(aelf.is_indexed) = true];
}

message OrganizationWhiteListChanged{
    option (aelf.is_event) = true;
    aelf.Address organization_address = 1;
    ProposerWhiteList proposer_white_list = 2;
}

message OrganizationThresholdChanged{
    option (aelf.is_event) = true;
    aelf.Address organization_address = 1;
    ProposalReleaseThreshold proposer_release_threshold = 2;
}