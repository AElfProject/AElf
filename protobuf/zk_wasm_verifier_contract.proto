syntax = "proto3";

import "aelf/options.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
// The namespace of this class
option csharp_namespace = "AElf.Contracts.ZkWasmVerifier";

service ZkWasmVerifier {
  // The name of the state class the smart contract is going to use to access blockchain state
  option (aelf.csharp_state) = "AElf.Contracts.ZkWasmVerifier.ZkWasmVerifierState";

  // Actions (methods that modify contract state)
  // Stores the value in contract state
  rpc Verify (VerifyInput) returns (google.protobuf.Empty) {
  }

  // Views (methods that don't modify contract state)
  // Get the value stored from contract state
  rpc Read (google.protobuf.Empty) returns (google.protobuf.StringValue) {
    option (aelf.is_view) = true;
  }
}

// An event that will be emitted from contract method call
message VerifyInput {
  repeated string proof = 1;
  repeated string verifyInstance = 2;
  repeated string aux = 3;
  repeated StringArray targetInstance = 4;
  message StringArray {
    repeated string value = 1;
  }
}