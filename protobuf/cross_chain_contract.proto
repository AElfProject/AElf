syntax = "proto3";

import "aelf/core.proto";
import "aelf/options.proto";
import "acs7.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";


option csharp_namespace = "AElf.Contracts.CrossChain";

service CrossChainContract {
    option (aelf.csharp_state) = "AElf.Contracts.CrossChain.CrossChainContractState";
    option (aelf.base) = "acs7.proto";
    
    // Actions
    rpc Initialize (InitializeInput) returns (google.protobuf.Empty) {
    }
    
    rpc WithdrawRequest (aelf.SInt32Value) returns (google.protobuf.Empty) {
    }
    rpc CreateSideChain (aelf.SInt32Value) returns (aelf.SInt32Value) {
    }
    rpc Recharge (RechargeInput) returns (google.protobuf.Empty) {
    }
    rpc RequestChainDisposal (aelf.SInt32Value) returns (aelf.Hash) {
    }
    rpc DisposeSideChain (aelf.SInt32Value) returns (aelf.SInt64Value) {
    }
    

    rpc ChangOwnerAddress(aelf.Address) returns (google.protobuf.Empty) {
    }

    // Views
    rpc VerifyTransaction (VerifyTransactionInput) returns (google.protobuf.BoolValue) {
        option (aelf.is_view) = true;
    }
    rpc CurrentSideChainSerialNumber (google.protobuf.Empty) returns (aelf.SInt64Value) {
        option (aelf.is_view) = true;
    }
    rpc LockedToken (aelf.SInt32Value) returns (aelf.SInt64Value) {
        option (aelf.is_view) = true;
    }
    rpc LockedAddress (aelf.SInt32Value) returns (aelf.Address) {
        option (aelf.is_view) = true;
    }
    rpc GetChainStatus (aelf.SInt32Value) returns (aelf.SInt32Value) {
        option (aelf.is_view) = true;
    }
    rpc GetSideChainHeight (aelf.SInt32Value) returns (aelf.SInt64Value) {
        option (aelf.is_view) = true;
    }
    rpc GetParentChainHeight (google.protobuf.Empty) returns (aelf.SInt64Value) {
        option (aelf.is_view) = true;
    }
    rpc GetParentChainId (google.protobuf.Empty) returns (aelf.SInt32Value) {
        option (aelf.is_view) = true;
    }
    rpc LockedBalance (aelf.SInt32Value) returns (aelf.SInt64Value) {
        option (aelf.is_view) = true;
    }
}

message InitializeInput {
    int32 parentChainId = 1;
    int64 creationHeightOnParentChain = 2;
}

message RechargeInput {
    int32 chainId = 1;
    sint64 amount = 2;
}

message VerifyTransactionInput {
    aelf.Hash transactionId = 1;
    repeated aelf.Hash path = 2;
    sint64 parentChainHeight = 3;
    int32 verifiedChainId = 4;
}

// Events
message CreationRequested
{
    option (aelf.is_event) = true;
    aelf.Address creator = 1;
    int32 chainId = 2;
}

message Disposed
{
    option (aelf.is_event) = true;
    int32 chainId = 1;
}



// from crosschain.proto


