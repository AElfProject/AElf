syntax = "proto3";

import "aelf/core.proto";
import "aelf/options.proto";
import "acs7.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "AElf.Contracts.CrossChain";

service CrossChainContract {
    
    option (aelf.csharp_state) = "AElf.Contracts.CrossChain.CrossChainContractState";
    option (aelf.base) = "acs7.proto";
    
    // Actions
    rpc Initialize (InitializeInput) returns (google.protobuf.Empty) {
    }
    
//    rpc WithdrawRequest (aelf.SInt32Value) returns (google.protobuf.Empty) {
//    }
    rpc Recharge (RechargeInput) returns (google.protobuf.Empty) {
    }
    rpc RequestChainDisposal (aelf.SInt32Value) returns (aelf.Hash) {
    }
    rpc DisposeSideChain (aelf.SInt32Value) returns (aelf.SInt64Value) {
    }
    rpc ChangOwnerAddress(aelf.Address) returns (google.protobuf.Empty) {
    }

    // Views
    rpc VerifyTransaction (VerifyTransactionInput) returns (google.protobuf.BoolValue) {
        option (aelf.is_view) = true;
    }
    rpc CurrentSideChainSerialNumber (google.protobuf.Empty) returns (aelf.SInt64Value) {
        option (aelf.is_view) = true;
    }
    rpc LockedToken (aelf.SInt32Value) returns (aelf.SInt64Value) {
        option (aelf.is_view) = true;
    }
    rpc LockedAddress (aelf.SInt32Value) returns (aelf.Address) {
        option (aelf.is_view) = true;
    }
    rpc GetChainStatus (aelf.SInt32Value) returns (aelf.SInt32Value) {
        option (aelf.is_view) = true;
    }
    rpc GetSideChainHeight (aelf.SInt32Value) returns (aelf.SInt64Value) {
        option (aelf.is_view) = true;
    }   
    rpc GetParentChainHeight (google.protobuf.Empty) returns (aelf.SInt64Value) {
        option (aelf.is_view) = true;
    }
    rpc GetParentChainId (google.protobuf.Empty) returns (aelf.SInt32Value) {
        option (aelf.is_view) = true;
    }
    rpc LockedBalance (aelf.SInt32Value) returns (aelf.SInt64Value) {
        option (aelf.is_view) = true;
    }
}

message InitializeInput {
    int32 parent_chain_id = 1;
    int64 creation_height_on_parent_chain = 2;
}

message RechargeInput {
    int32 chain_id = 1;
    sint64 amount = 2;
}

message VerifyTransactionInput {
    aelf.Hash transaction_id = 1;
    aelf.MerklePath path = 2;
    sint64 parent_chain_height = 3;
    int32 verified_chain_id = 4;
}

message IndexedChainHeightDict{
    map<int32, int64> indexed_chain_heights = 1;
}

// Events
message CreationRequested {
    option (aelf.is_event) = true;
    aelf.Address creator = 1;
    int32 chainId = 2;
}

message Disposed {
    option (aelf.is_event) = true;
    int32 chain_id = 1;
}

message ParentChainBlockDataIndexed{
    option (aelf.is_event) = true;
}

message SideChainBlockDataIndexed{
    option (aelf.is_event) = true;
}