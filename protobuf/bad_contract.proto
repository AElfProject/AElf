syntax = "proto3";

import "aelf/options.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "AElf.Runtime.CSharp.Tests.BadContract";

service BadContract {
    option (aelf.csharp_state) = "AElf.Runtime.CSharp.Tests.BadContract.BadContractState";

    rpc UpdateDoubleState (DoubleInput) returns (google.protobuf.Empty) { }
    
    rpc UpdateFloatState (FloatInput) returns (google.protobuf.Empty) { }
    
    rpc UpdateStateWithRandom (google.protobuf.Empty) returns (RandomOutput) { }
    
    rpc UpdateStateWithCurrentTime (google.protobuf.Empty) returns (DateTimeOutput) { }
    
    rpc WriteFileToNode (FileInfoInput) returns (google.protobuf.Empty) { }
    
    rpc InitLargeArray (google.protobuf.Empty) returns (google.protobuf.Empty) { }
    
    rpc InitLargeStringDynamic (InitLargeStringDynamicInput) returns (google.protobuf.Empty) { }
    
    rpc TestCallToNestedClass (google.protobuf.Empty) returns (google.protobuf.Empty) { }
    
    rpc TestCallToSeparateClass (google.protobuf.Empty) returns (google.protobuf.Empty) { }
    
    rpc TestGetHashCodeFromInput (GetHashCodeTestInput) returns (GetHashCodeTestOutput) { }
    
    rpc TestGetHashCodeFromContract (google.protobuf.Empty) returns (GetHashCodeTestOutput) { }

    rpc TestInfiniteLoop (google.protobuf.Empty) returns (google.protobuf.Empty) { }

    rpc TestInfiniteLoopInSeparateClass (google.protobuf.Empty) returns (google.protobuf.Empty) { }
    
    rpc TestInfiniteRecursiveCall (google.protobuf.Empty) returns (google.protobuf.Empty) { }

    rpc TestInfiniteRecursiveCallInSeparateClass (google.protobuf.Empty) returns (google.protobuf.Empty) { }
}

message DoubleInput {
    double double_value = 1;
}

message FloatInput {
    float float_value = 1;
}

message RandomOutput {
    int32 random_value = 1;
}

message DateTimeOutput {
    google.protobuf.Timestamp date_time_value = 1;
}

message FileInfoInput {
    string file_path = 1;
    string file_content = 2;
}

message InitLargeStringDynamicInput {
    int32 string_size_value = 1;
}

// For GetHashCode tests
enum Color {
    BLACK = 0;
    WHITE = 1;
    BLUE = 2;
}

message GetHashCodeTestInput {
    bool bool_value = 1;
    int32 int32_value = 2;
    uint32 u_int32_value = 3;
    int64 int64_value = 4;
    uint64 u_int64_value = 5;
    string string_value = 6;
    repeated string repeated_string_value = 7;
    Color enum_value = 8;
    bytes bytes_value = 9;
}

message GetHashCodeTestOutput {
    int32 bool_hash = 1;
    int32 int32_hash = 2;
    int32 uint32_hash = 3;
    int32 int64_hash = 4;
    int32 uint64_hash = 5;
    int32 string_hash = 6;
    int32 bytes_hash = 7;
    int32 repeated_string_hash = 8;
    int32 enum_hash = 9;
    int32 input_hash = 10;
}
