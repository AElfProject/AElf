/**
 * NFT Market Contract.
 */
syntax = "proto3";

package NFTMarket;

import "aelf/core.proto";
import "aelf/options.proto";
import "acs1.proto";
import "acs2.proto";
import "transaction_fee.proto";
import "authority_info.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/Timestamp.proto";

option csharp_namespace = "AElf.Contracts.NFTMarket";

service NFTMarketContract {
    option (aelf.csharp_state) = "AElf.Contracts.NFTMarket.NFTMarketContractState";
    option (aelf.base) = "acs1.proto";
    option (aelf.base) = "acs2.proto";

    rpc Initialize (InitializeInput) returns (google.protobuf.Empty) {
    }
    rpc ListWithFixedPrice (ListWithFixedPriceInput) returns (google.protobuf.Empty) {
    }
    rpc Buy (BuyInput) returns (google.protobuf.Empty) {
    }
    
    rpc ListWithEnglishAuction (ListWithEnglishAuctionInput) returns (google.protobuf.Empty) {
    }
    rpc ListWithDutchAuction (ListWithDutchAuctionInput) returns (google.protobuf.Empty) {
    }
    rpc Want (WantInput) returns (google.protobuf.Empty) {
    }
    rpc Claim (ClaimInput) returns (google.protobuf.Empty) {
    }
    rpc Deal (DealInput) returns (google.protobuf.Empty) {
    }

    rpc Delist (DelistInput) returns (google.protobuf.Empty) {
    }

    rpc SetServiceFee (google.protobuf.Int32Value) returns (google.protobuf.Empty) {
    }
    rpc SetRoyalty (SetRoyaltyInput) returns (google.protobuf.Empty) {
    }

    rpc GetDealInfo (google.protobuf.StringValue) returns (DealInfo) {
        option (aelf.is_view) = true;
    }
}

message InitializeInput {
    aelf.Address nft_contract_address = 1;
}

message ListWithFixedPriceInput {
    NFTList nft_list = 1;
    string symbol = 2;
    int64 price = 3;
    google.protobuf.Timestamp start_time = 4;
    Duration duration = 5;
    string description = 6;
}

message ListWithEnglishAuctionInput {
    NFTList nft_list = 1;
    string symbol = 2;
    int64 starting_price = 3;
    int64 reserve_price = 4;
    Duration duration = 5;
    string description = 6;
}

message ListWithDutchAuctionInput {
    NFTList nft_list = 1;
    string symbol = 2;
    int64 starting_price = 3;
    int64 ending_price = 4;
    Duration duration = 5;
    string description = 6;
}

message Duration {
    google.protobuf.Timestamp start_time = 1;
    int64 duration_minutes = 2;
}

message AssetInfo {
    ListType list_type = 1;
    OfferList offer_list = 2;
}

message OfferList {
    aelf.Address from = 1;
    Price price = 2;
    google.protobuf.Timestamp expire_time = 3;
}

message DelistInput {
    
}

message BuyInput {
    
}

message WantInput {
}

message DealInput {
}

message ClaimInput {
}

message DealInfo {
    
}

message NFTList {
    repeated aelf.Hash value = 1;
}

message SetRoyaltyInput {
    string symbol = 1;
    int64 token_id = 2;
    int32 royalty = 3;
}

enum ListType {
    NOT_LISTED = 0;
    FIXED_PRICE = 1;
    ENGLISH_AUCTION = 2;
    DUTCH_AUCTION = 3;
}

message Price {
    string symbol = 1;
    int64 amount = 2;
}

// Events

message NFTListed {
    option (aelf.is_event) = true;
}