/**
 * NFT Market Contract.
 */
syntax = "proto3";

package NFTMarket;

import "aelf/core.proto";
import "aelf/options.proto";
import "acs1.proto";
import "transaction_fee.proto";
import "authority_info.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "AElf.Contracts.NFTMarket";

service NFTMarketContract {
    option (aelf.csharp_state) = "AElf.Contracts.NFTMarket.NFTMarketContractState";
    option (aelf.base) = "acs1.proto";

    rpc Initialize (InitializeInput) returns (google.protobuf.Empty) {
    }
    
    // For Sellers.
    rpc ListWithFixedPrice (ListWithFixedPriceInput) returns (google.protobuf.Empty) {
    }
    rpc ListWithEnglishAuction (ListWithEnglishAuctionInput) returns (google.protobuf.Empty) {
    }
    rpc ListWithDutchAuction (ListWithDutchAuctionInput) returns (google.protobuf.Empty) {
    }
    rpc Deal (DealInput) returns (google.protobuf.Empty) {
    }
    rpc Delist (DelistInput) returns (google.protobuf.Empty) {
    }

    // For Buyers.
    rpc MakeOffer (MakeOfferInput) returns (google.protobuf.Empty) {
    }
    rpc CancelOffer (CancelOfferInput) returns (google.protobuf.Empty) {
    }

    // For Creators.
    rpc SetRoyalty (SetRoyaltyInput) returns (google.protobuf.Empty) {
    }
    rpc SetTokenWhiteList (SetTokenWhiteListInput) returns (google.protobuf.Empty) {
    }
    rpc SetCustomizeInfo (CustomizeInfo) returns (google.protobuf.Empty) {
    }
    rpc StakeForRequests (StakeForRequestsInput) returns (google.protobuf.Empty) {
    }
    rpc WithdrawStakingTokens (WithdrawStakingTokensInput) returns (google.protobuf.Empty) {
    }
    rpc HandleRequest (HandleRequestInput) returns (google.protobuf.Empty) {
    }
    rpc ClaimRemainDeposit (ClaimRemainDepositInput) returns (google.protobuf.Empty) {
    }

    // For Admin.
    rpc SetServiceFee (SetServiceFeeInput) returns (google.protobuf.Empty) {
    }
    rpc SetGlobalTokenWhiteList (StringList) returns (google.protobuf.Empty) {
    }

    // Views.
    rpc GetListedNFTInfoList (GetListedNFTInfoListInput) returns (ListedNFTInfoList) {
        option (aelf.is_view) = true;
    }
    rpc GetWhiteListAddressPriceList (GetWhiteListAddressPriceListInput) returns (WhiteListAddressPriceList) {
        option (aelf.is_view) = true;
    }
    rpc GetOfferAddressList (GetAddressListInput) returns (AddressList) {
        option (aelf.is_view) = true;
    }
    rpc GetOfferList (GetOfferListInput) returns (OfferList) {
        option (aelf.is_view) = true;
    }
    rpc GetBidAddressList (GetAddressListInput) returns (AddressList) {
        option (aelf.is_view) = true;
    }
    rpc GetBid (GetBidInput) returns (Bid) {
        option (aelf.is_view) = true;
    }
    rpc GetBidList (GetBidListInput) returns (BidList) {
        option (aelf.is_view) = true;
    }
    rpc GetCustomizeInfo (google.protobuf.StringValue) returns (CustomizeInfo) {
        option (aelf.is_view) = true;
    }
    rpc GetRequestInfo (GetRequestInfoInput) returns (RequestInfo) {
        option (aelf.is_view) = true;
    }
    rpc GetEnglishAuctionInfo (GetEnglishAuctionInfoInput) returns (EnglishAuctionInfo) {
        option (aelf.is_view) = true;
    }
    rpc GetDutchAuctionInfo (GetDutchAuctionInfoInput) returns (DutchAuctionInfo) {
        option (aelf.is_view) = true;
    }
    rpc GetTokenWhiteList (google.protobuf.StringValue) returns (StringList) {
        option (aelf.is_view) = true;
    }
    rpc GetGlobalTokenWhiteList (google.protobuf.Empty) returns (StringList) {
        option (aelf.is_view) = true;
    }
    rpc GetStakingTokens (google.protobuf.StringValue) returns (Price) {
        option (aelf.is_view) = true;
    }
    rpc GetRoyalty (GetRoyaltyInput) returns (RoyaltyInfo) {
        option (aelf.is_view) = true;
    }
    rpc GetServiceFeeInfo (google.protobuf.Empty) returns (ServiceFeeInfo) {
        option (aelf.is_view) = true;
    }
}

// Structs.

message ListedNFTInfo {
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address owner = 3;
    int64 quantity = 4;
    ListType list_type = 5;
    Price price = 6;
    ListDuration duration = 7;
}

message ListedNFTInfoList {
    repeated ListedNFTInfo value = 1;
}

message WhiteListAddressPriceList {
    repeated WhiteListAddressPrice value = 1;
}

message WhiteListAddressPrice {
    aelf.Address address = 1;
    Price price = 2;
}

message StringList {
    repeated string value = 1;
}

message AddressList {
    repeated aelf.Address value = 1;
}

message CustomizeInfo {
    string symbol = 1;
    int32 deposit_rate = 2;
    Price price = 3;
    int64 work_hours = 4;
    int64 white_list_hours = 5;
    int64 staking_amount = 6;
    repeated int64 reserved_token_ids = 7;
}

message Price {
    string symbol = 1;
    int64 amount = 2;
    int64 token_id = 3;// Only valid if the purchase symbol is a nft protocol.
}

message Offer {
    aelf.Address from = 1;
    aelf.Address to = 2;
    Price price = 3;
    google.protobuf.Timestamp expire_time = 4;
    int64 quantity = 5;
}

message OfferList {
    repeated Offer value = 1;
}

message Bid {
    aelf.Address from = 1;
    aelf.Address to = 2;
    Price price = 3;
    google.protobuf.Timestamp expire_time = 4;
}

message BidList {
    repeated Bid value = 1;
}

enum ListType {
    NOT_LISTED = 0;
    FIXED_PRICE = 1;
    ENGLISH_AUCTION = 2;
    DUTCH_AUCTION = 3;
}

message ListDuration {
    google.protobuf.Timestamp start_time = 1;
    google.protobuf.Timestamp public_time = 2;
    int64 duration_hours = 3;
}

message DealInfo {
    string symbol = 1;
    int64 token_id = 2;
    int64 quantity = 3;
    Price price = 4;
    aelf.Address origin_owner = 5;
    aelf.Address new_owner = 6;
    google.protobuf.Timestamp deal_time = 7;
}

message RequestInfo {
    string symbol = 1;
    int32 deposit_rate = 2;
    Price price = 3;
    int64 work_hours = 4;
    int64 white_list_hours = 5;
    int64 token_id = 6;
    bool is_confirmed = 7;
    google.protobuf.Timestamp expire_time = 8;
    google.protobuf.Timestamp white_list_due_time = 9;
    aelf.Address requester = 10;
    google.protobuf.Timestamp confirm_time = 11;
    google.protobuf.Timestamp list_time = 12;
    int64 work_hours_from_customize_info = 13;
}

message EnglishAuctionInfo {
    string symbol = 1;
    int64 token_id = 2;
    int64 starting_price = 3;
    string purchase_symbol = 4;
    ListDuration duration = 5;
    aelf.Address owner = 6;
    int64 earnest_money = 7;
    int64 deal_price = 8;
    aelf.Address deal_to = 9;
}

message DutchAuctionInfo {
    string symbol = 1;
    int64 token_id = 2;
    int64 starting_price = 3;
    int64 ending_price = 4;
    string purchase_symbol = 5;
    ListDuration duration = 6;
    aelf.Address owner = 7;
}

message CertainNFTRoyaltyInfo {
    bool is_manually_set = 1;
    int32 royalty = 2;
}

message ServiceFeeInfo {
    int32 service_fee_rate = 1;
    aelf.Address service_fee_receiver = 2;
}

// Inputs.

message InitializeInput {
    aelf.Address nft_contract_address = 1;
    aelf.Address admin_address = 2;
    int32 service_fee_rate = 3;
    aelf.Address service_fee_receiver = 4;
    int64 service_fee = 5;
}

message ListWithFixedPriceInput {
    string symbol = 1;
    int64 token_id = 2;
    Price price = 3;
    int64 quantity = 4;
    ListDuration duration = 5;
    WhiteListAddressPriceList white_list_address_price_list = 6;
    bool is_merge_to_previous_listed_info = 7;
}

message ListWithEnglishAuctionInput {
    string symbol = 1;
    int64 token_id = 2;
    int64 starting_price = 3;
    string purchase_symbol = 4;
    ListDuration duration = 5;
    int64 earnest_money = 6;
}

message ListWithDutchAuctionInput {
    string symbol = 1;
    int64 token_id = 2;
    int64 starting_price = 3;
    int64 ending_price = 4;
    string purchase_symbol = 5;
    ListDuration duration = 6;
}

message DelistInput {
    string symbol = 1;
    Price price = 2;
    int64 token_id = 3;
    int64 quantity = 4;
}

message MakeOfferInput {
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address offer_to = 3;
    int64 quantity = 4;
    Price price = 5;
    google.protobuf.Timestamp expire_time = 6;
}

message CancelOfferInput {
    string symbol = 1;
    int64 token_id = 2;
    Int32List index_list = 3;
    aelf.Address offer_from = 4;
    bool is_cancel_bid = 5;
}

message Int32List {
    repeated int32 value = 1;
}

message DealInput {
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address offer_from = 3;
    Price price = 4;
    int64 quantity = 5;
}

message SetServiceFeeInput {
    int32 service_fee_rate = 1;
    aelf.Address service_fee_receiver = 2;
}

message NFTList {
    repeated aelf.Hash value = 1;
}

message SetRoyaltyInput {
    string symbol = 1;
    int64 token_id = 2;
    int32 royalty = 3;
    aelf.Address royalty_fee_receiver = 4;
}

message SetTokenWhiteListInput {
    string symbol = 1;
    StringList token_white_list = 2;
}

message GetListedNFTInfoListInput {
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address owner = 3;
}

message GetAddressListInput {
    string symbol = 1;
    int64 token_id = 2;
}

message GetOfferListInput {
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address address = 3;
}

message HandleRequestInput {
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address requester = 3;
    bool is_confirm = 4;
}

message StakeForRequestsInput {
    string symbol = 1;
    int64 staking_amount = 2;
}

message WithdrawStakingTokensInput {
    string symbol = 1;
    int64 withdraw_amount = 2;
}

message GetRequestInfoInput {
    string symbol = 1;
    int64 token_id = 2;
}

message GetWhiteListAddressPriceListInput {
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address owner = 3;
}

message GetEnglishAuctionInfoInput {
    string symbol = 1;
    int64 token_id = 2;
}

message GetDutchAuctionInfoInput {
    string symbol = 1;
    int64 token_id = 2;
}

message GetBidInput {
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address address = 3;
}

message GetBidListInput {
    string symbol = 1;
    int64 token_id = 2;
}

message ClaimRemainDepositInput {
    string symbol = 1;
    int64 token_id = 2;
}

message GetRoyaltyInput {
    string symbol = 1;
    int64 token_id = 2;
}

message RoyaltyInfo {
    int32 royalty = 1;
    aelf.Address royalty_fee_receiver = 2;
}

// Events

message FixedPriceNFTListed {
    option (aelf.is_event) = true;
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address owner = 3;
    int64 quantity = 4;
    Price price = 5;
    ListDuration duration = 6;
    bool is_merged_to_previous_listed_info = 7;
    WhiteListAddressPriceList white_list_address_price_list = 8;
}

message EnglishAuctionNFTListed {
    option (aelf.is_event) = true;
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address owner = 3;
    string purchase_symbol = 4;
    int64 starting_price = 5;
    ListDuration duration = 6;
    int64 earnest_money = 7;
}

message DutchAuctionNFTListed {
    option (aelf.is_event) = true;
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address owner = 3;
    string purchase_symbol = 4;
    int64 starting_price = 5;
    int64 ending_price = 6;
    ListDuration duration = 7;
}

message NFTDelisted {
    option (aelf.is_event) = true;
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address owner = 3;
    int64 quantity = 4;
}

message TokenWhiteListChanged {
    option (aelf.is_event) = true;
    string symbol = 1;
    StringList token_white_list = 2;
}

message GlobalTokenWhiteListChanged {
    option (aelf.is_event) = true;
    StringList token_white_list = 1;
}

message OfferMade {
    option (aelf.is_event) = true;
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address offer_from = 3;
    aelf.Address offer_to = 4;
    Price price = 5;
    int64 quantity = 6;
    google.protobuf.Timestamp expire_time = 7;
}

message BidPlaced {
    option (aelf.is_event) = true;
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address offer_from = 3;
    aelf.Address offer_to = 4;
    Price price = 5;
    google.protobuf.Timestamp expire_time = 7;
}

message OfferCanceled {
    option (aelf.is_event) = true;
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address offer_from = 3;
    aelf.Address offer_to = 4;
    Int32List index_list = 5;
}

message BidCanceled {
    option (aelf.is_event) = true;
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address bid_from = 3;
    aelf.Address bid_to = 4;
}

message CustomizeInfoSet {
    option (aelf.is_event) = true;
    string symbol = 1;
    int32 deposit_rate = 2;
    Price price = 3;
    int64 work_hours = 4;
    int64 white_list_hours = 5;
    int64 staking_amount = 6;
}

message NewNFTRequested {
    option (aelf.is_event) = true;
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address requester = 3;
    Price price = 4;
    int64 expected_work_hours = 5;
}

message NFTRequestCancelled {
    option (aelf.is_event) = true;
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address requester = 3;
}

message NewNFTRequestConfirmed {
    option (aelf.is_event) = true;
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address requester = 3;
    Price price = 4;
    int64 confirmed_work_hours = 5;
}

message StakingAmountChanged {
    option (aelf.is_event) = true;
    string symbol = 1;
    int64 staking_amount = 2;
}

message NewNFTRequestRejected {
    option (aelf.is_event) = true;
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address requester = 3;
}

message Sold {
    option (aelf.is_event) = true;
    aelf.Address nft_from = 1;
    aelf.Address nft_to = 2;
    string nft_symbol = 3;
    int64 nft_token_id = 4;
    int64 nft_quantity = 5;
    string purchase_symbol = 6;
    int64 purchase_amount = 7;
    int64 purchase_token_id = 8;
}

message OfferAdded {
    option (aelf.is_event) = true;
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address offer_from = 3;
    aelf.Address offer_to = 4;
    Price price = 5;
    int64 quantity = 6;
    google.protobuf.Timestamp expire_time = 7;
}

message OfferChanged {
    option (aelf.is_event) = true;
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address offer_from = 3;
    aelf.Address offer_to = 4;
    Price price = 5;
    int64 quantity = 6;
    google.protobuf.Timestamp expire_time = 7;
}

message OfferRemoved {
    option (aelf.is_event) = true;
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address offer_from = 3;
    aelf.Address offer_to = 4;
    google.protobuf.Timestamp expire_time = 5;
}

message ListedNFTAdded {
    option (aelf.is_event) = true;
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address owner = 3;
    int64 quantity = 4;
    Price price = 5;
    ListDuration duration = 6;
}

message ListedNFTChanged {
    option (aelf.is_event) = true;
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address owner = 3;
    int64 quantity = 4;
    Price price = 5;
    ListDuration duration = 6;
    ListDuration previous_duration = 7;
}

message ListedNFTRemoved {
    option (aelf.is_event) = true;
    string symbol = 1;
    int64 token_id = 2;
    aelf.Address owner = 3;
    ListDuration duration = 4;
}