syntax = "proto3";

option csharp_namespace = "AElf.CrossChain";

import "common.proto";
import "crosschain.proto";

message RequestCrossChainBlockData {
    int32 FromChainId = 1; // own chain id
    int64 NextHeight = 2;
}

message ResponseSideChainBlockData {
    SideChainBlockData BlockData = 1;
    bool Success = 2;
}

message ResponseParentChainBlockData {
    ParentChainBlockData BlockData = 1;
    bool Success = 2;
}

message IndexingHandShake {
    int32 ListeningPort = 1;
    int32 ChainId = 2; // side chain shake with parent chain.
}

message IndexingHandShakeReply {
    bool Result = 1;
}

message ChainInitializationRequest{
    int32 chainId =1;
}

message ChainInitializationResponse{
    ChainInitializationContext SideChainInitializationContext = 1; 
}

service CrossChainRpc {
    rpc RequestIndexingFromSideChain (RequestCrossChainBlockData) returns (stream ResponseSideChainBlockData) {}
    rpc RequestIndexingFromParentChain (RequestCrossChainBlockData) returns (stream ResponseParentChainBlockData) {}
    rpc CrossChainIndexingShake (IndexingHandShake) returns (IndexingHandShakeReply) {} // only side chain shake with parent chain.
    rpc RequestChainInitializationContextFromParentChain (ChainInitializationRequest) returns (ChainInitializationResponse) {}
}