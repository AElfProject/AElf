/**
 *  WhiteList Contract.
 */
syntax = "proto3";

package whitelist;

import "aelf/core.proto";
import "aelf/options.proto";
import "google/protobuf/empty.proto";

option csharp_namespace = "AElf.Contracts.WhiteList";

service WhiteListContract{
  option (aelf.csharp_state) = "AElf.Contracts.WhiteList.WhiteListContractState";
  option (aelf.base) = "acs1.proto";
  
  rpc Initialize (InitializeInput) returns (google.protobuf.Empty) {
  }
  
  //For Managers.
  //Create whiteList.
  rpc CreateWhiteList(CreateWhiteListInput) returns (aelf.Hash){
  }

  //Add an address to an existing whiteList.
  rpc AddAddressInfoToWhiteList(AddAddressInfoToWhiteListInput) returns (google.protobuf.Empty){
  }
  
  //Remove address from an existing whiteList.
  rpc RemoveAddressInfoFromWhiteList(RemoveAddressInfoFromWhiteListInput) returns (google.protobuf.Empty){
  }

  //Add multiple addresses to an existing whiteList.
  rpc AddAddressInfoListToWhiteList(AddAddressInfoListToWhiteListInput) returns (google.protobuf.Empty){
  }
  
  //Remove multiple addresses from an existing whiteList.
  rpc RemoveAddressInfoListFromWhiteList(RemoveAddressInfoListFromWhiteListInput) returns (google.protobuf.Empty){
  }

  //Disable whiteList.
  rpc DisableWhiteList(DisableWhiteListInput) returns (google.protobuf.Empty){
  }
  
  //Set extra info by extra_info_hash.
  rpc SetExtraInfo(SetExtraInfoInput) returns (google.protobuf.Empty){
  }


  //For Subscribers.
  //Subscribe whiteList.
  rpc SubscribeWhiteList(SubscribeWhiteListInput) returns (aelf.Hash){
  }

  // ? Cancel subscribe according to the subscribe_id.
  rpc CancelSubscribeWhiteList(aelf.Hash) returns (google.protobuf.Empty){
  }
  
  //After used,address and extra info will be added into the consumedList. 
  rpc AddAddressInfoToConsumedList(AddAddressInfoToConsumedListInput) returns (google.protobuf.Empty){
  }

  //Clone whiteList.
  rpc CloneWhiteList(CloneWhiteListInput) returns (google.protobuf.Empty){
  }
  
  //Set extra_info in the cloned whiteList.
  rpc SetClonedWhiteListExtraInfo(SetClonedWhiteListExtraInfoInput) returns (google.protobuf.Empty){
  }


  //Views.
  //Get existing whiteList according to the white_list_id.
  rpc GetWhiteList(aelf.Hash) returns (WhiteListInfo){
    option (aelf.is_view) = true;
  }

  //Get subscribe whiteList info according to the subscribe_id.
  rpc GetSubscribeWhiteList(aelf.Hash) returns (SubscribeWhiteListInfo){
    option (aelf.is_view) = true;
  }

  //Get consumed list according to the subscribe_id.
  rpc GetConsumedList(aelf.Hash) returns (ConsumedList){
    option (aelf.is_view) = true;
  }
  
  //Get extra info according to the extra_info_id
  rpc GetExtraInfoByHash(aelf.Hash) returns (ExtraInfo){
    option (aelf.is_view) = true;
  }
  
  //Get clone whiteList according to the clone_id.
  rpc GetCloneWhiteList(aelf.Hash) returns(WhiteListInfo){
    option (aelf.is_view) = true;
  }
}


//Structs.

message WhiteListInfo{
  //The whiteList id.
  aelf.Hash whitelist_id = 1;
  //The list of address and extra info in this whiteList.
  AddressExtraIdInfoList address_extra_info_list = 2;
  //Whether the whiteList is available.
  bool is_available = 3;
  //Whether the whiteList can be cloned.
  bool is_cloned = 4;
  string remark = 5;
}

message SubscribeWhiteListInfo{
  //The subscribe id.
  aelf.Hash subscribe_id = 1;
  //The project id.
  aelf.Hash project_id = 2;
  //The whiteList id.
  aelf.Hash whitelist_id = 3;
  //The list of address in this whiteList.
  //AddressExtraInfoList address_extra_info_list = 4;
  //Whether the whiteList is available.
  //bool is_available = 6;
}

message ConsumedList{
  //The subscribe id.
  aelf.Hash subscribe_id = 1;
  //The whiteList id.
  aelf.Hash whitelist_id = 2;
  //The consumed address and extra info list in this whiteList.
  AddressExtraIdInfoList address_extra_info_list = 3;
}

message AddressExtraIdInfoList{
  repeated AddressExtraIdInfo value = 1;
}

message AddressExtraIdInfo{
  aelf.Address address = 1;
  aelf.Hash extra_info_id = 2;
}

message ExtraInfo{
  aelf.Hash extra_info_id = 1;
  bytes extra_info = 2;
}

message AddressList{
  repeated aelf.Address address = 1;
}

message AddressExtraInfo{
  aelf.Address address = 1;
  bytes extra_info = 2;
}

message AddressExtraInfoList{
  repeated AddressExtraInfo value = 1;
}

//Inputs.

message InitializeInput{
  
}

message CreateWhiteListInput{
  repeated AddressExtraInfo address_extra_info_list = 1;
  bool is_cloned = 2;
  string remark = 3;
}

message AddAddressInfoToWhiteListInput{
  aelf.Hash whitelist_id = 1;
  AddressExtraInfo address_extra_info = 2;
}

message RemoveAddressInfoFromWhiteListInput{
  aelf.Hash whitelist_id = 1;
  AddressExtraInfo address_extra_info = 2;
}

message AddAddressInfoListToWhiteListInput{
  aelf.Hash whitelist_id = 1;
  repeated AddressExtraInfo address_extra_info_list = 2;
}

message RemoveAddressInfoListFromWhiteListInput{
  aelf.Hash whitelist_id = 1;
  repeated AddressExtraInfo address_extra_info_list = 2;
}

message DisableWhiteListInput{
  aelf.Hash whitelist_id = 1;
  string remark = 2;
}

message SubscribeWhiteListInput{
  //The project id.
  aelf.Hash project_id = 1;
  //The whiteList id.
  aelf.Hash whitelist_id = 2;
}

message AddAddressInfoToConsumedListInput{
  aelf.Hash subscribe_id = 1;
  aelf.Hash whitelist_id = 2;
  AddressExtraIdInfo address_extra_info = 3;
}

message CloneWhiteListInput{
  aelf.Hash whitelist_id = 1;
}

message SetExtraInfoInput{
  aelf.Hash extra_info_id = 1;
  bytes extra_info = 2;
}

message SetClonedWhiteListExtraInfoInput{
  aelf.Hash clone_whitelist_id = 1;
  repeated AddressExtraInfo address_extra_info = 2;
}


//Events.

message WhiteListCreated{
  option (aelf.is_event) = true;
  //The whiteList id.
  aelf.Hash white_list_id = 1;
  //The list of address and extra info in this whiteList.
  AddressExtraIdInfoList address_extra_info_list = 2;
  //Whether the whiteList is available.
  bool is_available = 3;
  //Whether the whiteList can be cloned.
  bool is_cloned = 4;
  string remark = 5;
}

message WhiteListSubscribed{
  option (aelf.is_event) = true;
  //The subscribe id.
  aelf.Hash subscribe_id = 1;
  //The project id.
  aelf.Hash project_id = 2;
  //The whiteList id.
  aelf.Hash whitelist_id = 3;
}

message WhiteListAddressInfoAdded{
  option (aelf.is_event) = true;
  aelf.Hash whitelist_id = 1;
  AddressExtraIdInfoList address_extra_info_list = 2;
}

message WhiteListAddressInfoRemoved{
  option (aelf.is_event) = true;
  aelf.Hash whitelist_id = 1;
  AddressExtraIdInfoList address_extra_info_list = 2;
}

message WhiteListDisabled{
  option (aelf.is_event) = true;
  aelf.Hash whitelist_id = 1;
  bool is_available = 3;
  string remark = 4;
}

message ConsumedListAdded{
  option (aelf.is_event) = true;
  aelf.Hash subscribe_id = 1;
  aelf.Hash whitelist_id = 2;
  AddressExtraIdInfo address_extra_info = 3;
}

message SetExtraInfo{
  option (aelf.is_event) = true;
  aelf.Hash extra_info_id = 1;
  bytes extra_info = 2;
}

message WhiteListCloned{
  option (aelf.is_event) = true;
  aelf.Hash clone_id = 1;
  aelf.Hash whitelist_id = 2;
}

message SetClonedWhiteList{
  option (aelf.is_event) = true;
  aelf.Hash clone_id = 1;
  aelf.Hash whitelist_id = 2;
  AddressExtraIdInfoList address_extra_info = 3;
}
