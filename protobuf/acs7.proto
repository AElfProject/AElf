syntax = "proto3";

package acs7;

import "aelf/core.proto";
import "aelf/options.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option (aelf.identity) = "acs7";

service ACS7 {
    
    rpc RecordCrossChainData (CrossChainBlockData) returns (google.protobuf.Empty) {
    }
    rpc CreateSideChain (SideChainCreationRequest) returns (aelf.SInt32Value) {
    }
    rpc GetSideChainIdAndHeight (google.protobuf.Empty) returns (SideChainIdAndHeightDict) {
        option (aelf.is_view) = true;
    }
    rpc GetSideChainIndexingInformationList (google.protobuf.Empty) returns (SideChainIndexingInformationList) {
        option (aelf.is_view) = true;
    }
    rpc GetAllChainsIdAndHeight (google.protobuf.Empty) returns (SideChainIdAndHeightDict) {
        option (aelf.is_view) = true;
    }
    rpc GetIndexedCrossChainBlockDataByHeight (aelf.SInt64Value) returns (CrossChainBlockData) {
        option (aelf.is_view) = true;
    }
    rpc GetBoundParentChainHeightAndMerklePathByHeight (aelf.SInt64Value) returns (CrossChainMerkleProofContext) {
        option (aelf.is_view) = true;
    }
    rpc GetChainInitializationData (aelf.SInt32Value) returns (ChainInitializationData) {
        option (aelf.is_view) = true;
    }
}

message SideChainBlockData {
    int64 height = 1;
    aelf.Hash block_header_hash = 2;
    aelf.Hash transaction_merkle_tree_root = 3;
    int32 chain_id = 4;
}

message IndexedSideChainBlockDataResult {
    int64 height = 1;
    aelf.Address miner = 2;
    repeated SideChainBlockData side_chain_block_data = 3;
}

message ParentChainBlockData {
    int64 height = 1;
    CrossChainExtraData cross_chain_extra_data = 2;
    int32 chain_id = 3;
    aelf.Hash transaction_status_merkle_root = 4;

    // Indexed block height from side chain and merkle path for this side chain block
    map<int64, MerklePath> indexed_merkle_path = 5;
    map<string, bytes> extra_data = 6;
}

message CrossChainExtraData {
    // Merkle tree root of side chain block headers
    aelf.Hash side_chain_block_headers_root = 1;

    // Merkle tree root of side chain block transaction roots
    aelf.Hash side_chain_transactions_root = 2;
}

enum SideChainStatus
{
    FATAL = 0;
    ACTIVE = 1;
    TERMINATED = 2;
}

message SideChainIdAndHeightDict {
    map<int32, int64> id_height_dict = 1;
}

message SideChainIndexingInformationList {
    repeated SideChainIndexingInformation indexing_information_list = 1;
}

message SideChainIndexingInformation {
    int32 chain_id = 1;
    int64 indexed_height = 2;
    int64 to_be_indexed_count = 3;
}

message CrossChainBlockData {
    repeated SideChainBlockData side_chain_block_data = 1;
    repeated ParentChainBlockData parent_chain_block_data = 2;
    int64 previous_block_height = 3;
}

message CrossChainMerkleProofContext {
    int64 bound_parent_chain_height = 1;
    MerklePath merkle_path_for_parent_chain_root = 2;
}

message ChainInitializationData {
    int32 chain_id = 1;
    aelf.Address creator = 2;
    google.protobuf.Timestamp creation_timestamp = 3;
    repeated bytes extra_information = 4;
    int64 creation_height_on_parent_chain = 5;
    bool chain_creator_privilege_preserved = 6;
}

enum ResourceType
{
    UNDEFINED_RESOURCE_TYPE = 0;
    RAM = 1;
    CPU = 2;
    NET = 3;
}

message ResourceTypeBalancePair {
    ResourceType type = 1;
    uint64 amount = 2;
}

message SideChainInfo {
    SideChainCreationRequest side_chain_creation_request = 1;
    aelf.Address proposer = 2;
    SideChainStatus side_chain_status = 3;
    int32 side_chain_id = 4;
    aelf.Hash proposal_hash = 5;
    google.protobuf.Timestamp creation_timestamp = 6;
    int64 creation_height_on_parent_chain = 7;
}

message SideChainCreationRequest {
    int64 indexing_price = 1;
    int64 locked_token_amount = 2;
    bytes contract_code = 3;
    bool is_privilege_preserved = 4;
}

message RequestChainCreationOutput {
    int32 chain_id = 1;
    aelf.Hash proposal_id = 2;
}

message MerklePath {
    repeated aelf.Hash path = 1;
}