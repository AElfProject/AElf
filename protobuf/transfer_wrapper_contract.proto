/* This files is part of the Hello World smart contract example that is included in Boilerplate.
 * It is only the definition of the contract, implementation is located in the "contract" folder
 * and tests are located in the "test" folder.
 *
 * You can use this as a basic template for new contracts.
 * 
 * When building Boilerplate or the contract project located in the "../contract/AElf.Contracts.TransferWrapperContract/" 
 * protoc (the protobuf compiler) will be invoked and this file will produce a .c.cs file and .g.cs file, in the 
 * "../contract/AElf.Contracts.TransferWrapperContract/Protobuf/Generated/" folder. 
 */

// the version of the language, use proto3 for contracts
syntax = "proto3";

// some core imports for aelf chain types
import "aelf/core.proto";
import "aelf/options.proto";
import "acs2.proto";

// import for using the google.protobuf.Empty type.
import "google/protobuf/empty.proto";

// the name of the C# namespace in which the contract code will be,
// generated code will also be in this namespace.
option csharp_namespace = "AElf.Contracts.TransferWrapperContract";

// the contract definition: a gRPC service definition.
service TransferWrapperContract {
    option (aelf.csharp_state) = "AElf.Contracts.TransferWrapperContract.TransferWrapperContractState";
    option (aelf.base) = "acs2.proto";

    rpc Initialize(aelf.Address) returns (google.protobuf.Empty){
    }
    
    rpc ThroughContractTransfer (ThroughContractTransferInput) returns (google.protobuf.Empty) {
    }

    rpc ContractTransfer (ThroughContractTransferInput) returns (google.protobuf.Empty) {
    }
    
    rpc GetTokenAddress (google.protobuf.Empty) returns (aelf.Address){
        option (aelf.is_view) = true;
    }
}

message ThroughContractTransferInput {
    aelf.Address to = 1;
    string symbol = 2;
    int64 amount = 3;
    string memo = 4;
}