syntax = "proto3";

import "aelf/options.proto";
import "aelf/core.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "acs1.proto";

option csharp_namespace = "AElf.Contracts.TestContract.BasicFunction";

service BasicFunctionContract {
    option (aelf.csharp_state) = "AElf.Contracts.TestContract.BasicFunction.BasicFunctionContractState";
    option (aelf.base) = "acs1.proto";
    
    //Actions
    rpc InitialBasicFunctionContract(InitialBasicContractInput) returns (google.protobuf.Empty){
    }
    rpc UpdateBetLimit(BetLimitInput) returns (google.protobuf.Empty){
    }
    rpc UserPlayBet(BetInput) returns (google.protobuf.Empty) {
    }
    rpc LockToken(LockTokenInput) returns (google.protobuf.Empty) {
    }
    rpc UnlockToken(UnlockTokenInput) returns (google.protobuf.Empty) {
    }
    rpc ValidateOrigin(aelf.Address) returns (google.protobuf.Empty) {
    }

    //View
    rpc GetContractName(google.protobuf.Empty) returns (google.protobuf.StringValue){
        option (aelf.is_view) = true;
    }
    rpc QueryWinMoney(google.protobuf.Empty) returns (MoneyOutput) {
        option (aelf.is_view) = true;
    }
    rpc QueryRewardMoney(google.protobuf.Empty) returns (MoneyOutput) {
        option (aelf.is_view) = true;
    }
    rpc QueryUserWinMoney(aelf.Address) returns (MoneyOutput) {
        option (aelf.is_view) = true;
    }
    rpc QueryUserLoseMoney(aelf.Address) returns (MoneyOutput) {
        option (aelf.is_view) = true;
    }
    rpc TransferTokenToContract(TransferTokenToContractInput) returns (google.protobuf.Empty){
        option (aelf.is_view) = true;
    }
    rpc GetLockedAmount(GetLockedTokenAmountInput) returns(GetLockedTokenAmountOutput){
        option (aelf.is_view) = true;
    }
}

//Input
message InitialBasicContractInput {
    string contract_name = 1;
    int64 min_value = 2;
    int64 max_value = 3;
    int64 mortgage_value = 4;
    aelf.Address manager = 5;
}

message BetLimitInput {
    int64 min_value = 1;
    int64 max_value = 2;
}

message BetInput {
    int64 int64_value = 1;
}

message LockTokenInput{
    aelf.Address address = 1; // The one want to lock his token.
    aelf.Hash lock_id = 2;
    string symbol = 3;
    string usage = 4;
    int64 amount = 5;
}

message UnlockTokenInput {
    aelf.Address address = 1; // The one want to lock his token.
    aelf.Hash lock_id = 2;
    string symbol = 3;
    string usage = 4;
    int64 amount = 5;
}
//Output

message GetLockedTokenAmountInput {
    aelf.Address address = 1;
    string symbol = 2;
    aelf.Hash lock_id = 3;
}

message GetLockedTokenAmountOutput {
    aelf.Address address = 1;
    string symbol = 2;
    aelf.Hash lock_id = 3;
    sint64 amount = 4;
}

message MoneyOutput {
    int64 int64_value = 1;
}

message BetStatus {
    bool bool_value = 1;
}

message TransferTokenToContractInput {
    string symbol = 1;
    sint64 amount = 2;
    string memo = 3;
}
