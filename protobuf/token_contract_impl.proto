syntax = "proto3";

package tokenimpl;

import "aelf/core.proto";
import "acs1.proto";
import "acs2.proto";
import "token_contract.proto";
// Because implementation uses this proto file.
import "transaction_fee.proto";

option csharp_namespace = "AElf.Contracts.MultiToken";

service TokenContractImpl {
    option (aelf.csharp_state) = "AElf.Contracts.MultiToken.TokenContractState";
    option (aelf.base) = "acs1.proto";
    option (aelf.base) = "acs2.proto";
    option (aelf.base) = "token_contract.proto";
    
    // ACS8 Related - Resource Token Charge & Deposit
    rpc AdvanceResourceToken (AdvanceResourceTokenInput) returns (google.protobuf.Empty) {
    }
    rpc TakeResourceTokenBack (TakeResourceTokenBackInput) returns (google.protobuf.Empty) {
    }

    rpc RegisterCrossChainTokenContractAddress (RegisterCrossChainTokenContractAddressInput) returns (google.protobuf.Empty) {
    }
    rpc SetFeeReceiver (aelf.Address) returns (google.protobuf.Empty) {
    }
    rpc ValidateTokenInfoExists(ValidateTokenInfoExistsInput) returns (google.protobuf.Empty){
    }
    
    // Exclusive Side Chain Rental Stuff.
    rpc UpdateRental (UpdateRentalInput) returns (google.protobuf.Empty) {
    }
    rpc UpdateRentedResources (UpdateRentedResourcesInput) returns (google.protobuf.Empty) {
    }

    rpc TransferToContract (TransferToContractInput) returns (google.protobuf.Empty) {
    }
    rpc ChangeSideChainRentalController (acs1.AuthorityInfo) returns (google.protobuf.Empty) {
    }
    rpc ChangeSymbolsToPayTXSizeFeeController(acs1.AuthorityInfo) returns (google.protobuf.Empty){
    }
    rpc ChangeCrossChainTokenContractRegistrationController (acs1.AuthorityInfo) returns (google.protobuf.Empty) {
    }
    rpc ChangeUserFeeController (acs1.AuthorityInfo) returns (google.protobuf.Empty) {
    }
    rpc ChangeDeveloperController (acs1.AuthorityInfo) returns (google.protobuf.Empty) {
    }

    // Views
    rpc GetFeeReceiver (google.protobuf.Empty) returns (aelf.Address){
        option (aelf.is_view) = true;
    }
    rpc GetResourceUsage (google.protobuf.Empty) returns (ResourceUsage) {
        option (aelf.is_view) = true;
    }
    rpc GetSymbolsToPayTXSizeFeeController(google.protobuf.Empty) returns (acs1.AuthorityInfo){
        option (aelf.is_view) = true;
    }
    rpc GetCrossChainTokenContractRegistrationController (google.protobuf.Empty) returns (acs1.AuthorityInfo) {
        option (aelf.is_view) = true;
    }
    rpc GetUserFeeController(google.protobuf.Empty) returns (UserFeeController){
        option (aelf.is_view) = true;
    }
    rpc GetDeveloperFeeController (google.protobuf.Empty) returns (DeveloperFeeController) {
        option (aelf.is_view) = true;
    }
    rpc GetSideChainRentalControllerCreateInfo (google.protobuf.Empty) returns (acs1.AuthorityInfo) {
        option (aelf.is_view) = true;
    }
    rpc GetVirtualAddressForLocking (GetVirtualAddressForLockingInput) returns (aelf.Address) {
        option (aelf.is_view) = true;
    }
    rpc GetOwningRental (google.protobuf.Empty) returns (OwningRental) {
        option (aelf.is_view) = true;
    }
    rpc GetOwningRentalUnitValue (google.protobuf.Empty) returns (OwningRentalUnitValue) {
        option (aelf.is_view) = true;
    }
}

message ProfitReceivingInformation {
    aelf.Address contract_address = 1;
    aelf.Address profit_receiver_address = 2;
    int32 donation_parts_per_hundred = 3;
}

message ReceiveProfitsInput {
    aelf.Address contract_address = 1;
    string symbol = 2;
    int64 amount = 3;
}

message AdvanceResourceTokenInput {
    aelf.Address contract_address = 1;
    string resource_token_symbol = 2;
    int64 amount = 3;
}

message TakeResourceTokenBackInput {
    aelf.Address contract_address = 1;
    string resource_token_symbol = 2;
    int64 amount = 3;
}

message RegisterCrossChainTokenContractAddressInput{
    int32 from_chain_id = 1;
    int64 parent_chain_height = 2;
    bytes transaction_bytes = 3;
    aelf.MerklePath merkle_path = 4;
    aelf.Address token_contract_address = 5;
}

message ValidateTokenInfoExistsInput{
    string symbol = 1;
    string token_name = 2;
    int64 total_supply = 3;
    int32 decimals = 4;
    aelf.Address issuer = 5;
    bool is_burnable = 6;
    int32 issue_chain_id = 7;
    bool is_profitable = 8;
}

message UpdateRentalInput {
    map<string, int64> rental = 1;
}

message UpdateRentedResourcesInput {
    map<string, int32> resource_amount = 1;
}

message ResourceUsage {
    map<string, int32> value = 1;
}

message GetVirtualAddressForLockingInput {
    aelf.Address address = 1;
    aelf.Hash lock_id = 2;
}

message OwningRental {
    map<string, int64> resource_amount = 1;
}

message OwningRentalUnitValue {
    map<string, int64> resource_unit_value = 1;
}

message TransferToContractInput {
    string symbol = 1;
    int64 amount = 2;
    string memo = 3;
}

// about authority
message UserFeeController{
    acs1.AuthorityInfo root_controller = 1;
    acs1.AuthorityInfo parliament_controller = 2;
    acs1.AuthorityInfo referendum_controller = 3;
}

message DeveloperFeeController {
    acs1.AuthorityInfo root_controller = 1;
    acs1.AuthorityInfo parliament_controller = 2;
    acs1.AuthorityInfo developer_controller = 3;
}
