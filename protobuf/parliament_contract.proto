syntax = "proto3";

package parliament;

import "aelf/options.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "aelf/core.proto";

option csharp_namespace = "AElf.Contracts.Parliament";

service ParliamentContract {
    
    option (aelf.csharp_state) = "AElf.Contracts.Parliament.ParliamentState";
   
    
    // Actions
    rpc Initialize(InitializeInput) returns (google.protobuf.Empty) {
    }
    rpc ApproveMultiProposals(ProposalIdList) returns (google.protobuf.Empty){
    }
    rpc GetDefaultOrganizationAddress (google.protobuf.Empty) returns (aelf.Address) {
        option (aelf.is_view) = true;
    }
    rpc ValidateAddressIsParliamentMember(aelf.Address) returns (google.protobuf.BoolValue){
         option (aelf.is_view) = true;
    }
    rpc GetNotVotedPendingProposals(ProposalIdList) returns (ProposalIdList){
        option (aelf.is_view) = true;
    }
    rpc GetNotVotedProposals(ProposalIdList) returns (ProposalIdList){
        option (aelf.is_view) = true;
    }
}

message InitializeInput{
    aelf.Address privileged_proposer = 1;
    bool proposer_authority_required = 2;
}

message ProposalIdList{
    repeated aelf.Hash proposal_ids = 1;
}
