<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <ProtoBaseDir>..\..\protobuf</ProtoBaseDir>
        <PatcherDir>..\..\scripts\patcher</PatcherDir>
        <PatcherProjectName>AElf.ContractDeployer</PatcherProjectName>
        <LauncherTargetDir>../../src/AElf.Launcher/contracts</LauncherTargetDir>
        <NuGetPackageVersion>1.10.0</NuGetPackageVersion>
    </PropertyGroup>

    <ItemGroup>
        <NuGetPackage Include="AElf.Contracts.Association" />
        <NuGetPackage Include="AElf.Contracts.Configuration" />
        <NuGetPackage Include="AElf.Contracts.Consensus.AEDPoS" />
        <NuGetPackage Include="AElf.Contracts.CrossChain" />
        <NuGetPackage Include="AElf.Contracts.Economic" />
        <NuGetPackage Include="AElf.Contracts.Election" />
        <NuGetPackage Include="AElf.Contracts.Genesis" />
        <NuGetPackage Include="AElf.Contracts.MultiToken" />
        <NuGetPackage Include="AElf.Contracts.Parliament" />
        <NuGetPackage Include="AElf.Contracts.Profit" />
        <NuGetPackage Include="AElf.Contracts.Referendum" />
        <NuGetPackage Include="AElf.Contracts.TokenConverter" />
        <NuGetPackage Include="AElf.Contracts.TokenHolder" />
        <NuGetPackage Include="AElf.Contracts.Treasury" />
        <NuGetPackage Include="AElf.Contracts.Vote" />
    </ItemGroup>

    <ItemGroup>
        <None Include="$(ProtoBaseDir)\aelf\*">
            <Link>Protobuf\Proto\aelf/*</Link>
        </None>
    </ItemGroup>

    <Choose>
        <When Condition="!$([MSBuild]::IsOsPlatform(Windows))">
            <PropertyGroup>
                <GenerateContractBaseCommand>../../scripts/generate_contract_base.sh</GenerateContractBaseCommand>
                <GenerateContractCodeCommand>../../scripts/generate_contract_code.sh</GenerateContractCodeCommand>
                <GenerateContractReferenceCommand>../../scripts/generate_contract_reference.sh</GenerateContractReferenceCommand>
                <GenerateContractStubCommand>../../scripts/generate_contract_stub.sh</GenerateContractStubCommand>
                <GenerateContractMessageCommand>../../scripts/generate_event_only.sh</GenerateContractMessageCommand>
            </PropertyGroup>
        </When>
        <Otherwise>
            <PropertyGroup>
                <GenerateContractBaseCommand>..\..\scripts\generate_contract_base.bat</GenerateContractBaseCommand>
                <GenerateContractCodeCommand>..\..\scripts\generate_contract_code.bat</GenerateContractCodeCommand>
                <GenerateContractReferenceCommand>..\..\scripts\generate_contract_reference.bat</GenerateContractReferenceCommand>
                <GenerateContractStubCommand>..\..\scripts\generate_contract_stub.bat</GenerateContractStubCommand>
                <GenerateContractMessageCommand>..\..\scripts\generate_event_only.bat</GenerateContractMessageCommand>
            </PropertyGroup>
        </Otherwise>
    </Choose>

    <!-- Generate protobuf code before building and getting the target path -->
    <Target Name="GenerateProtobufCode" BeforeTargets="BeforeBuild;GetTargetPath">
        <PropertyGroup>
            <LocalProtobufDir>$(ProjectDir)/Protobuf</LocalProtobufDir>
            <GenerateContractInternalCommand>protoc --proto_path=../../protobuf --csharp_out=internal_access:$(LocalProtobufDir)/Generated --csharp_opt=file_extension=.g.cs</GenerateContractInternalCommand>
        </PropertyGroup>
        <PropertyGroup>
            <LocalProtobufDir>$(ProjectDir)/Protobuf</LocalProtobufDir>
            <GenerateCommonMessageCommand>protoc --proto_path=../../protobuf --csharp_out=$(LocalProtobufDir)/Generated --csharp_opt=file_extension=.g.cs</GenerateCommonMessageCommand>
        </PropertyGroup>
        <PropertyGroup>
            <IsContract Condition="'@(ContractCode)' != ''">true</IsContract>
        </PropertyGroup>

        <ItemGroup>
            <Compile Remove="Protobuf/Generated/*.cs"/>
        </ItemGroup>
        <RemoveDir Directories="Protobuf\Generated"/>

        <MakeDir Condition="@(ContractInternal) != '' Or @(CommonMessage) != '' Or @(ContractBase) != '' Or @(ContractCode) != '' Or @(ContractReference) != '' Or @(ContractStub) != '' Or @(ContractMessage) != ''" Directories="$(LocalProtobufDir)/Generated"/>
        <Exec Condition="@(ContractInternal) != ''" Command="$(GenerateContractInternalCommand) %(Identity)"/>
        <Exec Condition="@(CommonMessage) != ''" Command="$(GenerateCommonMessageCommand) %(Identity)"/>
        <Exec Condition="@(ContractBase) != '' And $(IsContract) != '' AND '$(IsContract)' " Command="$(GenerateContractBaseCommand) %(Identity) "/>
        <Exec Condition="@(ContractBase) != '' And %(ContractBase.PublicAccessibility) == 'true'" Command="$(GenerateContractBaseCommand) %(Identity) "/>
        <Exec Condition="@(ContractBase) != '' And $(IsContract) == '' And %(ContractBase.PublicAccessibility) != 'true'" Command="$(GenerateContractBaseCommand) %(Identity) internal_access"/>
        <Exec Condition="@(ContractCode) != ''" Command="$(GenerateContractCodeCommand) %(Identity)"/>
        <Exec Condition="@(ContractReference) != ''" Command="$(GenerateContractReferenceCommand)  %(Identity)"/>
        <Exec Condition="@(ContractStub) != ''" Command="$(GenerateContractStubCommand) %(Identity)"/>
        <Exec Condition="@(ContractMessage) != ''" Command="$(GenerateContractMessageCommand) %(Identity)"/>
        <ItemGroup>
            <Compile Remove="Protobuf/Generated/*.cs"/>
            <Compile Include="Protobuf/Generated/*.cs"/>
        </ItemGroup>
    </Target>

    <!-- Build patcher before building the contract -->
    <Target Name="PatcherBuild" BeforeTargets="BeforeBuild">
        <PropertyGroup>
            <IsContract Condition="'@(ContractCode)' != ''">true</IsContract>
            <IsSystemContract Condition="'@(ContractCode)' != '' And %(ContractCode.SystemContract) != '' And %(ContractCode.SystemContract)">true</IsSystemContract>
        </PropertyGroup>
        <MSBuild Condition="'$(IsContract)' != '' AND '$(IsContract)'"
                 Projects="$(ProjectDir)/../../src/$(PatcherProjectName)/$(PatcherProjectName).csproj"/>
    </Target>

    <!-- Restore NuGet packages -->
    <Target Name="RestoreNuGetPackages" BeforeTargets="BeforeBuild">
        <Exec Command="dotnet restore" />
    </Target>

    <!-- Compile restored packages using dotnet $(PatcherProjectName).dll -->
    <Target Name="PatchContractCode" AfterTargets="RestoreNuGetPackages">
        <ItemGroup>
            <RestoredPackages Include="$(NuGetPackageRoot)/%(NuGetPackage.Identity)/$(NuGetPackageVersion)/lib/net8.0/*.dll" />
        </ItemGroup>
        <Exec WorkingDirectory="$(PatcherDir)"
              Command="dotnet $(PatcherProjectName).dll -t -p %(RestoredPackages.FullPath)"
              ConsoleToMSBuild="true"
              Condition="'%(RestoredPackages.FullPath)' != ''">
            <Output TaskParameter="ConsoleOutput" ItemName="PatchContractCodeOutput"/>
        </Exec>
        <Message Text="$(PatchContractCodeOutput)"/>
    </Target>

    <!-- Copy restored and patched DLLs to the target directory -->
    <Target Name="CopyRestoredDlls" AfterTargets="PatchContractCode">
        <ItemGroup>
            <PatchedDlls Include="@(RestoredPackages->'%(FullPath).patched')" />
        </ItemGroup>
        <Copy SourceFiles="@(RestoredPackages)" DestinationFolder="$(LauncherTargetDir)" SkipUnchangedFiles="true" />
        <Copy SourceFiles="@(PatchedDlls)" DestinationFolder="$(LauncherTargetDir)" SkipUnchangedFiles="true" />
    </Target>
</Project>