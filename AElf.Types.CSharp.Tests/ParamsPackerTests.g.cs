// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ParamsPackerTests.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Types.CSharp.Tests {

  /// <summary>Holder for reflection information generated from ParamsPackerTests.proto</summary>
  public static partial class ParamsPackerTestsReflection {

    #region Descriptor
    /// <summary>File descriptor for ParamsPackerTests.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ParamsPackerTestsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdQYXJhbXNQYWNrZXJUZXN0cy5wcm90byJ8CgpUZXN0UGFyYW1zEg4KBmZp",
            "ZWxkMRgBIAEoCBIOCgZmaWVsZDIYAiABKBESDgoGZmllbGQzGAMgASgNEg4K",
            "BmZpZWxkNBgEIAEoEhIOCgZmaWVsZDUYBSABKAQSDgoGZmllbGQ2GAYgASgJ",
            "Eg4KBmZpZWxkNxgHIAEoDEIaqgIXQUVsZi5UeXBlcy5DU2hhcnAuVGVzdHNi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Types.CSharp.Tests.TestParams), global::AElf.Types.CSharp.Tests.TestParams.Parser, new[]{ "Field1", "Field2", "Field3", "Field4", "Field5", "Field6", "Field7" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TestParams : pb::IMessage<TestParams> {
    private static readonly pb::MessageParser<TestParams> _parser = new pb::MessageParser<TestParams>(() => new TestParams());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestParams> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Types.CSharp.Tests.ParamsPackerTestsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestParams() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestParams(TestParams other) : this() {
      field1_ = other.field1_;
      field2_ = other.field2_;
      field3_ = other.field3_;
      field4_ = other.field4_;
      field5_ = other.field5_;
      field6_ = other.field6_;
      field7_ = other.field7_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestParams Clone() {
      return new TestParams(this);
    }

    /// <summary>Field number for the "field1" field.</summary>
    public const int Field1FieldNumber = 1;
    private bool field1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Field1 {
      get { return field1_; }
      set {
        field1_ = value;
      }
    }

    /// <summary>Field number for the "field2" field.</summary>
    public const int Field2FieldNumber = 2;
    private int field2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Field2 {
      get { return field2_; }
      set {
        field2_ = value;
      }
    }

    /// <summary>Field number for the "field3" field.</summary>
    public const int Field3FieldNumber = 3;
    private uint field3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Field3 {
      get { return field3_; }
      set {
        field3_ = value;
      }
    }

    /// <summary>Field number for the "field4" field.</summary>
    public const int Field4FieldNumber = 4;
    private long field4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Field4 {
      get { return field4_; }
      set {
        field4_ = value;
      }
    }

    /// <summary>Field number for the "field5" field.</summary>
    public const int Field5FieldNumber = 5;
    private ulong field5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Field5 {
      get { return field5_; }
      set {
        field5_ = value;
      }
    }

    /// <summary>Field number for the "field6" field.</summary>
    public const int Field6FieldNumber = 6;
    private string field6_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Field6 {
      get { return field6_; }
      set {
        field6_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "field7" field.</summary>
    public const int Field7FieldNumber = 7;
    private pb::ByteString field7_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Field7 {
      get { return field7_; }
      set {
        field7_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestParams);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestParams other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Field1 != other.Field1) return false;
      if (Field2 != other.Field2) return false;
      if (Field3 != other.Field3) return false;
      if (Field4 != other.Field4) return false;
      if (Field5 != other.Field5) return false;
      if (Field6 != other.Field6) return false;
      if (Field7 != other.Field7) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Field1 != false) hash ^= Field1.GetHashCode();
      if (Field2 != 0) hash ^= Field2.GetHashCode();
      if (Field3 != 0) hash ^= Field3.GetHashCode();
      if (Field4 != 0L) hash ^= Field4.GetHashCode();
      if (Field5 != 0UL) hash ^= Field5.GetHashCode();
      if (Field6.Length != 0) hash ^= Field6.GetHashCode();
      if (Field7.Length != 0) hash ^= Field7.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Field1 != false) {
        output.WriteRawTag(8);
        output.WriteBool(Field1);
      }
      if (Field2 != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Field2);
      }
      if (Field3 != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Field3);
      }
      if (Field4 != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(Field4);
      }
      if (Field5 != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Field5);
      }
      if (Field6.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Field6);
      }
      if (Field7.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Field7);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Field1 != false) {
        size += 1 + 1;
      }
      if (Field2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Field2);
      }
      if (Field3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Field3);
      }
      if (Field4 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Field4);
      }
      if (Field5 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Field5);
      }
      if (Field6.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Field6);
      }
      if (Field7.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Field7);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestParams other) {
      if (other == null) {
        return;
      }
      if (other.Field1 != false) {
        Field1 = other.Field1;
      }
      if (other.Field2 != 0) {
        Field2 = other.Field2;
      }
      if (other.Field3 != 0) {
        Field3 = other.Field3;
      }
      if (other.Field4 != 0L) {
        Field4 = other.Field4;
      }
      if (other.Field5 != 0UL) {
        Field5 = other.Field5;
      }
      if (other.Field6.Length != 0) {
        Field6 = other.Field6;
      }
      if (other.Field7.Length != 0) {
        Field7 = other.Field7;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Field1 = input.ReadBool();
            break;
          }
          case 16: {
            Field2 = input.ReadSInt32();
            break;
          }
          case 24: {
            Field3 = input.ReadUInt32();
            break;
          }
          case 32: {
            Field4 = input.ReadSInt64();
            break;
          }
          case 40: {
            Field5 = input.ReadUInt64();
            break;
          }
          case 50: {
            Field6 = input.ReadString();
            break;
          }
          case 58: {
            Field7 = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
